
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a56  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000ad4  00000000  00000000  00000aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004b4  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 29 05 	jmp	0xa52	; 0xa52 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "MDIO_Config.h"
#include "MDIO_Interface.h"
#include "MDIO_Private.h"

int main(int argc, char **argv)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	9a 83       	std	Y+2, r25	; 0x02
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	7c 83       	std	Y+4, r23	; 0x04
  7e:	6b 83       	std	Y+3, r22	; 0x03
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
}
  84:	0f 90       	pop	r0
  86:	0f 90       	pop	r0
  88:	0f 90       	pop	r0
  8a:	0f 90       	pop	r0
  8c:	cf 91       	pop	r28
  8e:	df 91       	pop	r29
  90:	08 95       	ret

00000092 <MDIO_u8SetPinDirection>:

/* Set Pin Direction */
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirec)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <MDIO_u8SetPinDirection+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <MDIO_u8SetPinDirection+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <MDIO_u8SetPinDirection+0xa>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	8a 83       	std	Y+2, r24	; 0x02
  a2:	6b 83       	std	Y+3, r22	; 0x03
  a4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorSate = STD_TYPE_OK;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= MDIO_Pin_7 && Copy_u8PortId <= MDIO_PORTD && Copy_u8PinDirec <= MDIO_INPUT_PULLED_UP)
  aa:	8b 81       	ldd	r24, Y+3	; 0x03
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	08 f0       	brcs	.+2      	; 0xb2 <MDIO_u8SetPinDirection+0x20>
  b0:	97 c1       	rjmp	.+814    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
  b2:	8a 81       	ldd	r24, Y+2	; 0x02
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	08 f0       	brcs	.+2      	; 0xba <MDIO_u8SetPinDirection+0x28>
  b8:	93 c1       	rjmp	.+806    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
  ba:	8c 81       	ldd	r24, Y+4	; 0x04
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	08 f0       	brcs	.+2      	; 0xc2 <MDIO_u8SetPinDirection+0x30>
  c0:	8f c1       	rjmp	.+798    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
	{
		/* Select Pin Direction */
		switch (Copy_u8PortId)
  c2:	8a 81       	ldd	r24, Y+2	; 0x02
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	3e 83       	std	Y+6, r19	; 0x06
  ca:	2d 83       	std	Y+5, r18	; 0x05
  cc:	8d 81       	ldd	r24, Y+5	; 0x05
  ce:	9e 81       	ldd	r25, Y+6	; 0x06
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	91 05       	cpc	r25, r1
  d4:	09 f4       	brne	.+2      	; 0xd8 <MDIO_u8SetPinDirection+0x46>
  d6:	72 c0       	rjmp	.+228    	; 0x1bc <MDIO_u8SetPinDirection+0x12a>
  d8:	2d 81       	ldd	r18, Y+5	; 0x05
  da:	3e 81       	ldd	r19, Y+6	; 0x06
  dc:	22 30       	cpi	r18, 0x02	; 2
  de:	31 05       	cpc	r19, r1
  e0:	2c f4       	brge	.+10     	; 0xec <MDIO_u8SetPinDirection+0x5a>
  e2:	8d 81       	ldd	r24, Y+5	; 0x05
  e4:	9e 81       	ldd	r25, Y+6	; 0x06
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	71 f0       	breq	.+28     	; 0x106 <MDIO_u8SetPinDirection+0x74>
  ea:	79 c1       	rjmp	.+754    	; 0x3de <MDIO_u8SetPinDirection+0x34c>
  ec:	2d 81       	ldd	r18, Y+5	; 0x05
  ee:	3e 81       	ldd	r19, Y+6	; 0x06
  f0:	22 30       	cpi	r18, 0x02	; 2
  f2:	31 05       	cpc	r19, r1
  f4:	09 f4       	brne	.+2      	; 0xf8 <MDIO_u8SetPinDirection+0x66>
  f6:	bd c0       	rjmp	.+378    	; 0x272 <MDIO_u8SetPinDirection+0x1e0>
  f8:	8d 81       	ldd	r24, Y+5	; 0x05
  fa:	9e 81       	ldd	r25, Y+6	; 0x06
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	91 05       	cpc	r25, r1
 100:	09 f4       	brne	.+2      	; 0x104 <MDIO_u8SetPinDirection+0x72>
 102:	12 c1       	rjmp	.+548    	; 0x328 <MDIO_u8SetPinDirection+0x296>
 104:	6c c1       	rjmp	.+728    	; 0x3de <MDIO_u8SetPinDirection+0x34c>
		{
		case MDIO_PORTA:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
 106:	8c 81       	ldd	r24, Y+4	; 0x04
 108:	88 23       	and	r24, r24
 10a:	a1 f4       	brne	.+40     	; 0x134 <MDIO_u8SetPinDirection+0xa2>
			{
				/*Set DDRA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
 10c:	aa e3       	ldi	r26, 0x3A	; 58
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	ea e3       	ldi	r30, 0x3A	; 58
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	48 2f       	mov	r20, r24
 118:	8b 81       	ldd	r24, Y+3	; 0x03
 11a:	28 2f       	mov	r18, r24
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 2e       	mov	r0, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <MDIO_u8SetPinDirection+0x98>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <MDIO_u8SetPinDirection+0x94>
 12e:	84 2b       	or	r24, r20
 130:	8c 93       	st	X, r24
 132:	56 c1       	rjmp	.+684    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	a9 f4       	brne	.+42     	; 0x164 <MDIO_u8SetPinDirection+0xd2>
			{
				/*Clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
 13a:	aa e3       	ldi	r26, 0x3A	; 58
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	ea e3       	ldi	r30, 0x3A	; 58
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	48 2f       	mov	r20, r24
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 2e       	mov	r0, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <MDIO_u8SetPinDirection+0xc6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <MDIO_u8SetPinDirection+0xc2>
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	8c 93       	st	X, r24
 162:	3e c1       	rjmp	.+636    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
 164:	8c 81       	ldd	r24, Y+4	; 0x04
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	39 f5       	brne	.+78     	; 0x1b8 <MDIO_u8SetPinDirection+0x126>
			{
				/*clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
 16a:	aa e3       	ldi	r26, 0x3A	; 58
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	ea e3       	ldi	r30, 0x3A	; 58
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <MDIO_u8SetPinDirection+0xf4>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	2a 95       	dec	r18
 188:	e2 f7       	brpl	.-8      	; 0x182 <MDIO_u8SetPinDirection+0xf0>
 18a:	80 95       	com	r24
 18c:	84 23       	and	r24, r20
 18e:	8c 93       	st	X, r24
				/*Set PORTA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
 190:	ab e3       	ldi	r26, 0x3B	; 59
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	eb e3       	ldi	r30, 0x3B	; 59
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 2e       	mov	r0, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <MDIO_u8SetPinDirection+0x11c>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <MDIO_u8SetPinDirection+0x118>
 1b2:	84 2b       	or	r24, r20
 1b4:	8c 93       	st	X, r24
 1b6:	14 c1       	rjmp	.+552    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else
			{
				Local_u8ErrorSate = STD_TYPE_NOK;
 1b8:	19 82       	std	Y+1, r1	; 0x01
 1ba:	12 c1       	rjmp	.+548    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
 1bc:	8c 81       	ldd	r24, Y+4	; 0x04
 1be:	88 23       	and	r24, r24
 1c0:	a1 f4       	brne	.+40     	; 0x1ea <MDIO_u8SetPinDirection+0x158>
			{
				/*Set DDRB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
 1c2:	a7 e3       	ldi	r26, 0x37	; 55
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	e7 e3       	ldi	r30, 0x37	; 55
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	48 2f       	mov	r20, r24
 1ce:	8b 81       	ldd	r24, Y+3	; 0x03
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 2e       	mov	r0, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <MDIO_u8SetPinDirection+0x14e>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <MDIO_u8SetPinDirection+0x14a>
 1e4:	84 2b       	or	r24, r20
 1e6:	8c 93       	st	X, r24
 1e8:	fb c0       	rjmp	.+502    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
 1ea:	8c 81       	ldd	r24, Y+4	; 0x04
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	a9 f4       	brne	.+42     	; 0x21a <MDIO_u8SetPinDirection+0x188>
			{
				/*Clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
 1f0:	a7 e3       	ldi	r26, 0x37	; 55
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e7 e3       	ldi	r30, 0x37	; 55
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	48 2f       	mov	r20, r24
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 2e       	mov	r0, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <MDIO_u8SetPinDirection+0x17c>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <MDIO_u8SetPinDirection+0x178>
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	8c 93       	st	X, r24
 218:	e3 c0       	rjmp	.+454    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
 21a:	8c 81       	ldd	r24, Y+4	; 0x04
 21c:	82 30       	cpi	r24, 0x02	; 2
 21e:	39 f5       	brne	.+78     	; 0x26e <MDIO_u8SetPinDirection+0x1dc>
			{
				/*clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
 220:	a7 e3       	ldi	r26, 0x37	; 55
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e7 e3       	ldi	r30, 0x37	; 55
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	48 2f       	mov	r20, r24
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	28 2f       	mov	r18, r24
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <MDIO_u8SetPinDirection+0x1aa>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	2a 95       	dec	r18
 23e:	e2 f7       	brpl	.-8      	; 0x238 <MDIO_u8SetPinDirection+0x1a6>
 240:	80 95       	com	r24
 242:	84 23       	and	r24, r20
 244:	8c 93       	st	X, r24
				/*Set PORTB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
 246:	a8 e3       	ldi	r26, 0x38	; 56
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e8 e3       	ldi	r30, 0x38	; 56
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 2e       	mov	r0, r18
 25e:	02 c0       	rjmp	.+4      	; 0x264 <MDIO_u8SetPinDirection+0x1d2>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <MDIO_u8SetPinDirection+0x1ce>
 268:	84 2b       	or	r24, r20
 26a:	8c 93       	st	X, r24
 26c:	b9 c0       	rjmp	.+370    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else
			{
				Local_u8ErrorSate = STD_TYPE_NOK;
 26e:	19 82       	std	Y+1, r1	; 0x01
 270:	b7 c0       	rjmp	.+366    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
 272:	8c 81       	ldd	r24, Y+4	; 0x04
 274:	88 23       	and	r24, r24
 276:	a1 f4       	brne	.+40     	; 0x2a0 <MDIO_u8SetPinDirection+0x20e>
			{
				/*Set DDRC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
 278:	a4 e3       	ldi	r26, 0x34	; 52
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e4 e3       	ldi	r30, 0x34	; 52
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	48 2f       	mov	r20, r24
 284:	8b 81       	ldd	r24, Y+3	; 0x03
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 2e       	mov	r0, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <MDIO_u8SetPinDirection+0x204>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	0a 94       	dec	r0
 298:	e2 f7       	brpl	.-8      	; 0x292 <MDIO_u8SetPinDirection+0x200>
 29a:	84 2b       	or	r24, r20
 29c:	8c 93       	st	X, r24
 29e:	a0 c0       	rjmp	.+320    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
 2a0:	8c 81       	ldd	r24, Y+4	; 0x04
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	a9 f4       	brne	.+42     	; 0x2d0 <MDIO_u8SetPinDirection+0x23e>
			{
				/*Clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
 2a6:	a4 e3       	ldi	r26, 0x34	; 52
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	e4 e3       	ldi	r30, 0x34	; 52
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8b 81       	ldd	r24, Y+3	; 0x03
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <MDIO_u8SetPinDirection+0x232>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <MDIO_u8SetPinDirection+0x22e>
 2c8:	80 95       	com	r24
 2ca:	84 23       	and	r24, r20
 2cc:	8c 93       	st	X, r24
 2ce:	88 c0       	rjmp	.+272    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	82 30       	cpi	r24, 0x02	; 2
 2d4:	39 f5       	brne	.+78     	; 0x324 <MDIO_u8SetPinDirection+0x292>
			{
				/*clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
 2d6:	a4 e3       	ldi	r26, 0x34	; 52
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e4 e3       	ldi	r30, 0x34	; 52
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <MDIO_u8SetPinDirection+0x260>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	2a 95       	dec	r18
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <MDIO_u8SetPinDirection+0x25c>
 2f6:	80 95       	com	r24
 2f8:	84 23       	and	r24, r20
 2fa:	8c 93       	st	X, r24
				/*Set PORTC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
 2fc:	a5 e3       	ldi	r26, 0x35	; 53
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e5 e3       	ldi	r30, 0x35	; 53
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	48 2f       	mov	r20, r24
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <MDIO_u8SetPinDirection+0x288>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <MDIO_u8SetPinDirection+0x284>
 31e:	84 2b       	or	r24, r20
 320:	8c 93       	st	X, r24
 322:	5e c0       	rjmp	.+188    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else
			{
				Local_u8ErrorSate = STD_TYPE_NOK;
 324:	19 82       	std	Y+1, r1	; 0x01
 326:	5c c0       	rjmp	.+184    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
 328:	8c 81       	ldd	r24, Y+4	; 0x04
 32a:	88 23       	and	r24, r24
 32c:	a1 f4       	brne	.+40     	; 0x356 <MDIO_u8SetPinDirection+0x2c4>
			{
				/*Set DDRD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
 32e:	a1 e3       	ldi	r26, 0x31	; 49
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e1 e3       	ldi	r30, 0x31	; 49
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	48 2f       	mov	r20, r24
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 2e       	mov	r0, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <MDIO_u8SetPinDirection+0x2ba>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <MDIO_u8SetPinDirection+0x2b6>
 350:	84 2b       	or	r24, r20
 352:	8c 93       	st	X, r24
 354:	45 c0       	rjmp	.+138    	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
 356:	8c 81       	ldd	r24, Y+4	; 0x04
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	a9 f4       	brne	.+42     	; 0x386 <MDIO_u8SetPinDirection+0x2f4>
			{
				/*Clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
 35c:	a1 e3       	ldi	r26, 0x31	; 49
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	e1 e3       	ldi	r30, 0x31	; 49
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	48 2f       	mov	r20, r24
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	28 2f       	mov	r18, r24
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <MDIO_u8SetPinDirection+0x2e8>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <MDIO_u8SetPinDirection+0x2e4>
 37e:	80 95       	com	r24
 380:	84 23       	and	r24, r20
 382:	8c 93       	st	X, r24
 384:	2d c0       	rjmp	.+90     	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
 386:	8c 81       	ldd	r24, Y+4	; 0x04
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	39 f5       	brne	.+78     	; 0x3da <MDIO_u8SetPinDirection+0x348>
			{
				/*clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
 38c:	a1 e3       	ldi	r26, 0x31	; 49
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	e1 e3       	ldi	r30, 0x31	; 49
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <MDIO_u8SetPinDirection+0x316>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	2a 95       	dec	r18
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <MDIO_u8SetPinDirection+0x312>
 3ac:	80 95       	com	r24
 3ae:	84 23       	and	r24, r20
 3b0:	8c 93       	st	X, r24
				/*Set PORTD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
 3b2:	a2 e3       	ldi	r26, 0x32	; 50
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	e2 e3       	ldi	r30, 0x32	; 50
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	48 2f       	mov	r20, r24
 3be:	8b 81       	ldd	r24, Y+3	; 0x03
 3c0:	28 2f       	mov	r18, r24
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 2e       	mov	r0, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <MDIO_u8SetPinDirection+0x33e>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <MDIO_u8SetPinDirection+0x33a>
 3d4:	84 2b       	or	r24, r20
 3d6:	8c 93       	st	X, r24
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			else
			{
				Local_u8ErrorSate = STD_TYPE_NOK;
 3da:	19 82       	std	Y+1, r1	; 0x01
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <MDIO_u8SetPinDirection+0x34e>
			}
			break;
		default:
			Local_u8ErrorSate = STD_TYPE_NOK;
 3de:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorSate;
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
}
 3e2:	26 96       	adiw	r28, 0x06	; 6
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	cf 91       	pop	r28
 3f0:	df 91       	pop	r29
 3f2:	08 95       	ret

000003f4 <MDIO_u8SetPortDirection>:

/* Set Port Direction */
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirec)
{
 3f4:	df 93       	push	r29
 3f6:	cf 93       	push	r28
 3f8:	00 d0       	rcall	.+0      	; 0x3fa <MDIO_u8SetPortDirection+0x6>
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <MDIO_u8SetPortDirection+0x8>
 3fc:	0f 92       	push	r0
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	8a 83       	std	Y+2, r24	; 0x02
 404:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorSate = STD_TYPE_OK;
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PortDirec <= MDIO_INPUT_PULLED_UP)
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	84 30       	cpi	r24, 0x04	; 4
 40e:	08 f0       	brcs	.+2      	; 0x412 <MDIO_u8SetPortDirection+0x1e>
 410:	96 c0       	rjmp	.+300    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	83 30       	cpi	r24, 0x03	; 3
 416:	08 f0       	brcs	.+2      	; 0x41a <MDIO_u8SetPortDirection+0x26>
 418:	92 c0       	rjmp	.+292    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
	{
		switch (Copy_u8PortId)
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	3d 83       	std	Y+5, r19	; 0x05
 422:	2c 83       	std	Y+4, r18	; 0x04
 424:	8c 81       	ldd	r24, Y+4	; 0x04
 426:	9d 81       	ldd	r25, Y+5	; 0x05
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	91 05       	cpc	r25, r1
 42c:	99 f1       	breq	.+102    	; 0x494 <MDIO_u8SetPortDirection+0xa0>
 42e:	2c 81       	ldd	r18, Y+4	; 0x04
 430:	3d 81       	ldd	r19, Y+5	; 0x05
 432:	22 30       	cpi	r18, 0x02	; 2
 434:	31 05       	cpc	r19, r1
 436:	2c f4       	brge	.+10     	; 0x442 <MDIO_u8SetPortDirection+0x4e>
 438:	8c 81       	ldd	r24, Y+4	; 0x04
 43a:	9d 81       	ldd	r25, Y+5	; 0x05
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	71 f0       	breq	.+28     	; 0x45c <MDIO_u8SetPortDirection+0x68>
 440:	7d c0       	rjmp	.+250    	; 0x53c <MDIO_u8SetPortDirection+0x148>
 442:	2c 81       	ldd	r18, Y+4	; 0x04
 444:	3d 81       	ldd	r19, Y+5	; 0x05
 446:	22 30       	cpi	r18, 0x02	; 2
 448:	31 05       	cpc	r19, r1
 44a:	09 f4       	brne	.+2      	; 0x44e <MDIO_u8SetPortDirection+0x5a>
 44c:	3f c0       	rjmp	.+126    	; 0x4cc <MDIO_u8SetPortDirection+0xd8>
 44e:	8c 81       	ldd	r24, Y+4	; 0x04
 450:	9d 81       	ldd	r25, Y+5	; 0x05
 452:	83 30       	cpi	r24, 0x03	; 3
 454:	91 05       	cpc	r25, r1
 456:	09 f4       	brne	.+2      	; 0x45a <MDIO_u8SetPortDirection+0x66>
 458:	55 c0       	rjmp	.+170    	; 0x504 <MDIO_u8SetPortDirection+0x110>
 45a:	70 c0       	rjmp	.+224    	; 0x53c <MDIO_u8SetPortDirection+0x148>
		{
		case MDIO_PORTA:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	88 23       	and	r24, r24
 460:	29 f4       	brne	.+10     	; 0x46c <MDIO_u8SetPortDirection+0x78>
			{
				/* Set all Port A pins as Output */
				PRIVATE_DDRA_REG = MDIO_ALL_PORT_OUTPUT;
 462:	ea e3       	ldi	r30, 0x3A	; 58
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	8f ef       	ldi	r24, 0xFF	; 255
 468:	80 83       	st	Z, r24
 46a:	69 c0       	rjmp	.+210    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
 46c:	8b 81       	ldd	r24, Y+3	; 0x03
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	21 f4       	brne	.+8      	; 0x47a <MDIO_u8SetPortDirection+0x86>
			{
				/* Set all Port A pins as Input (Floating) */
				PRIVATE_DDRA_REG = MDIO_ALL_PORT_INPUT;
 472:	ea e3       	ldi	r30, 0x3A	; 58
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	10 82       	st	Z, r1
 478:	62 c0       	rjmp	.+196    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
 47a:	8b 81       	ldd	r24, Y+3	; 0x03
 47c:	82 30       	cpi	r24, 0x02	; 2
 47e:	41 f4       	brne	.+16     	; 0x490 <MDIO_u8SetPortDirection+0x9c>
			{
				/* Set all Port A pins as Input (Pulled-Up) */
				PRIVATE_DDRA_REG = MDIO_ALL_PORT_INPUT;
 480:	ea e3       	ldi	r30, 0x3A	; 58
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port A pins */
				PRIVATE_PORTA_REG = MDIO_ALL_PORT_OUTPUT;
 486:	eb e3       	ldi	r30, 0x3B	; 59
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	80 83       	st	Z, r24
 48e:	57 c0       	rjmp	.+174    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else
			{
				Local_u8ErrorSate = STD_TYPE_NOK;
 490:	19 82       	std	Y+1, r1	; 0x01
 492:	55 c0       	rjmp	.+170    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	88 23       	and	r24, r24
 498:	29 f4       	brne	.+10     	; 0x4a4 <MDIO_u8SetPortDirection+0xb0>
			{
				/* Set all Port B pins as Output */
				PRIVATE_DDRB_REG = MDIO_ALL_PORT_OUTPUT;
 49a:	e7 e3       	ldi	r30, 0x37	; 55
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	80 83       	st	Z, r24
 4a2:	4d c0       	rjmp	.+154    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	81 30       	cpi	r24, 0x01	; 1
 4a8:	21 f4       	brne	.+8      	; 0x4b2 <MDIO_u8SetPortDirection+0xbe>
			{
				/* Set all Port B pins as Input (Floating) */
				PRIVATE_DDRB_REG = MDIO_ALL_PORT_INPUT;
 4aa:	e7 e3       	ldi	r30, 0x37	; 55
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	10 82       	st	Z, r1
 4b0:	46 c0       	rjmp	.+140    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
 4b2:	8b 81       	ldd	r24, Y+3	; 0x03
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	41 f4       	brne	.+16     	; 0x4c8 <MDIO_u8SetPortDirection+0xd4>
			{
				/* Set all Port B pins as Input (Pulled-Up) */
				PRIVATE_DDRB_REG = MDIO_ALL_PORT_INPUT;
 4b8:	e7 e3       	ldi	r30, 0x37	; 55
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port B pins */
				PRIVATE_PORTB_REG = MDIO_ALL_PORT_OUTPUT;
 4be:	e8 e3       	ldi	r30, 0x38	; 56
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	8f ef       	ldi	r24, 0xFF	; 255
 4c4:	80 83       	st	Z, r24
 4c6:	3b c0       	rjmp	.+118    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else
			{
				Local_u8ErrorSate = STD_TYPE_NOK;
 4c8:	19 82       	std	Y+1, r1	; 0x01
 4ca:	39 c0       	rjmp	.+114    	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	88 23       	and	r24, r24
 4d0:	29 f4       	brne	.+10     	; 0x4dc <MDIO_u8SetPortDirection+0xe8>
			{
				/* Set all Port C pins as Output */
				PRIVATE_DDRC_REG = MDIO_ALL_PORT_OUTPUT;
 4d2:	e4 e3       	ldi	r30, 0x34	; 52
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	80 83       	st	Z, r24
 4da:	31 c0       	rjmp	.+98     	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
 4dc:	8b 81       	ldd	r24, Y+3	; 0x03
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	21 f4       	brne	.+8      	; 0x4ea <MDIO_u8SetPortDirection+0xf6>
			{
				/* Set all Port C pins as Input (Floating) */
				PRIVATE_DDRC_REG = MDIO_ALL_PORT_INPUT;
 4e2:	e4 e3       	ldi	r30, 0x34	; 52
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	10 82       	st	Z, r1
 4e8:	2a c0       	rjmp	.+84     	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
 4ea:	8b 81       	ldd	r24, Y+3	; 0x03
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	41 f4       	brne	.+16     	; 0x500 <MDIO_u8SetPortDirection+0x10c>
			{
				/* Set all Port C pins as Input (Pulled-Up) */
				PRIVATE_DDRC_REG = MDIO_ALL_PORT_INPUT;
 4f0:	e4 e3       	ldi	r30, 0x34	; 52
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port C pins */
				PRIVATE_PORTC_REG = MDIO_ALL_PORT_OUTPUT;
 4f6:	e5 e3       	ldi	r30, 0x35	; 53
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	8f ef       	ldi	r24, 0xFF	; 255
 4fc:	80 83       	st	Z, r24
 4fe:	1f c0       	rjmp	.+62     	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else
			{
				Local_u8ErrorSate = STD_TYPE_NOK;
 500:	19 82       	std	Y+1, r1	; 0x01
 502:	1d c0       	rjmp	.+58     	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	88 23       	and	r24, r24
 508:	29 f4       	brne	.+10     	; 0x514 <MDIO_u8SetPortDirection+0x120>
			{
				/* Set all Port D pins as Output */
				PRIVATE_DDRD_REG = MDIO_ALL_PORT_OUTPUT;
 50a:	e1 e3       	ldi	r30, 0x31	; 49
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	80 83       	st	Z, r24
 512:	15 c0       	rjmp	.+42     	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	21 f4       	brne	.+8      	; 0x522 <MDIO_u8SetPortDirection+0x12e>
			{
				/* Set all Port D pins as Input (Floating) */
				PRIVATE_DDRD_REG = MDIO_ALL_PORT_INPUT;
 51a:	e1 e3       	ldi	r30, 0x31	; 49
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	10 82       	st	Z, r1
 520:	0e c0       	rjmp	.+28     	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
 522:	8b 81       	ldd	r24, Y+3	; 0x03
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	41 f4       	brne	.+16     	; 0x538 <MDIO_u8SetPortDirection+0x144>
			{
				/* Set all Port D pins as Input (Pulled-Up) */
				PRIVATE_DDRD_REG = MDIO_ALL_PORT_INPUT;
 528:	e1 e3       	ldi	r30, 0x31	; 49
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port D pins */
				PRIVATE_PORTD_REG = MDIO_ALL_PORT_OUTPUT;
 52e:	e2 e3       	ldi	r30, 0x32	; 50
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	80 83       	st	Z, r24
 536:	03 c0       	rjmp	.+6      	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			else
			{
				Local_u8ErrorSate = STD_TYPE_NOK;
 538:	19 82       	std	Y+1, r1	; 0x01
 53a:	01 c0       	rjmp	.+2      	; 0x53e <MDIO_u8SetPortDirection+0x14a>
			}
			break;
		default:
			Local_u8ErrorSate = STD_TYPE_NOK;
 53c:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorSate;
 53e:	89 81       	ldd	r24, Y+1	; 0x01
}
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	cf 91       	pop	r28
 54c:	df 91       	pop	r29
 54e:	08 95       	ret

00000550 <MDIO_u8SetPinValue>:
/* Set Pin Value */
u8 MDIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
 550:	df 93       	push	r29
 552:	cf 93       	push	r28
 554:	00 d0       	rcall	.+0      	; 0x556 <MDIO_u8SetPinValue+0x6>
 556:	00 d0       	rcall	.+0      	; 0x558 <MDIO_u8SetPinValue+0x8>
 558:	00 d0       	rcall	.+0      	; 0x55a <MDIO_u8SetPinValue+0xa>
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	8a 83       	std	Y+2, r24	; 0x02
 560:	6b 83       	std	Y+3, r22	; 0x03
 562:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_Pin_7 && Copy_u8PinValue <= MDIO_HIGH)
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	84 30       	cpi	r24, 0x04	; 4
 56c:	08 f0       	brcs	.+2      	; 0x570 <MDIO_u8SetPinValue+0x20>
 56e:	ef c0       	rjmp	.+478    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
 570:	8b 81       	ldd	r24, Y+3	; 0x03
 572:	88 30       	cpi	r24, 0x08	; 8
 574:	08 f0       	brcs	.+2      	; 0x578 <MDIO_u8SetPinValue+0x28>
 576:	eb c0       	rjmp	.+470    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
 578:	8c 81       	ldd	r24, Y+4	; 0x04
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	08 f0       	brcs	.+2      	; 0x580 <MDIO_u8SetPinValue+0x30>
 57e:	e7 c0       	rjmp	.+462    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	28 2f       	mov	r18, r24
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	3e 83       	std	Y+6, r19	; 0x06
 588:	2d 83       	std	Y+5, r18	; 0x05
 58a:	8d 81       	ldd	r24, Y+5	; 0x05
 58c:	9e 81       	ldd	r25, Y+6	; 0x06
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	91 05       	cpc	r25, r1
 592:	09 f4       	brne	.+2      	; 0x596 <MDIO_u8SetPinValue+0x46>
 594:	48 c0       	rjmp	.+144    	; 0x626 <MDIO_u8SetPinValue+0xd6>
 596:	2d 81       	ldd	r18, Y+5	; 0x05
 598:	3e 81       	ldd	r19, Y+6	; 0x06
 59a:	22 30       	cpi	r18, 0x02	; 2
 59c:	31 05       	cpc	r19, r1
 59e:	2c f4       	brge	.+10     	; 0x5aa <MDIO_u8SetPinValue+0x5a>
 5a0:	8d 81       	ldd	r24, Y+5	; 0x05
 5a2:	9e 81       	ldd	r25, Y+6	; 0x06
 5a4:	00 97       	sbiw	r24, 0x00	; 0
 5a6:	71 f0       	breq	.+28     	; 0x5c4 <MDIO_u8SetPinValue+0x74>
 5a8:	d1 c0       	rjmp	.+418    	; 0x74c <MDIO_u8SetPinValue+0x1fc>
 5aa:	2d 81       	ldd	r18, Y+5	; 0x05
 5ac:	3e 81       	ldd	r19, Y+6	; 0x06
 5ae:	22 30       	cpi	r18, 0x02	; 2
 5b0:	31 05       	cpc	r19, r1
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <MDIO_u8SetPinValue+0x66>
 5b4:	69 c0       	rjmp	.+210    	; 0x688 <MDIO_u8SetPinValue+0x138>
 5b6:	8d 81       	ldd	r24, Y+5	; 0x05
 5b8:	9e 81       	ldd	r25, Y+6	; 0x06
 5ba:	83 30       	cpi	r24, 0x03	; 3
 5bc:	91 05       	cpc	r25, r1
 5be:	09 f4       	brne	.+2      	; 0x5c2 <MDIO_u8SetPinValue+0x72>
 5c0:	94 c0       	rjmp	.+296    	; 0x6ea <MDIO_u8SetPinValue+0x19a>
 5c2:	c4 c0       	rjmp	.+392    	; 0x74c <MDIO_u8SetPinValue+0x1fc>
		{
		case MDIO_PORTA:
			if (Copy_u8PinValue == MDIO_HIGH)
 5c4:	8c 81       	ldd	r24, Y+4	; 0x04
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	a1 f4       	brne	.+40     	; 0x5f2 <MDIO_u8SetPinValue+0xa2>
			{
				/* Set PORTA Pin in PORTA Reg */
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
 5ca:	ab e3       	ldi	r26, 0x3B	; 59
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	eb e3       	ldi	r30, 0x3B	; 59
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	48 2f       	mov	r20, r24
 5d6:	8b 81       	ldd	r24, Y+3	; 0x03
 5d8:	28 2f       	mov	r18, r24
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 2e       	mov	r0, r18
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <MDIO_u8SetPinValue+0x98>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <MDIO_u8SetPinValue+0x94>
 5ec:	84 2b       	or	r24, r20
 5ee:	8c 93       	st	X, r24
 5f0:	ae c0       	rjmp	.+348    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
 5f2:	8c 81       	ldd	r24, Y+4	; 0x04
 5f4:	88 23       	and	r24, r24
 5f6:	a9 f4       	brne	.+42     	; 0x622 <MDIO_u8SetPinValue+0xd2>
			{
				/* Clear PORTA Pin in PORTA Reg */
				CLEAR_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
 5f8:	ab e3       	ldi	r26, 0x3B	; 59
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	eb e3       	ldi	r30, 0x3B	; 59
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	48 2f       	mov	r20, r24
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	28 2f       	mov	r18, r24
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 2e       	mov	r0, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <MDIO_u8SetPinValue+0xc6>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	0a 94       	dec	r0
 618:	e2 f7       	brpl	.-8      	; 0x612 <MDIO_u8SetPinValue+0xc2>
 61a:	80 95       	com	r24
 61c:	84 23       	and	r24, r20
 61e:	8c 93       	st	X, r24
 620:	96 c0       	rjmp	.+300    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			else
			{
				Local_u8ErrorState = STD_TYPE_NOK;
 622:	19 82       	std	Y+1, r1	; 0x01
 624:	94 c0       	rjmp	.+296    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinValue == MDIO_HIGH)
 626:	8c 81       	ldd	r24, Y+4	; 0x04
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	a1 f4       	brne	.+40     	; 0x654 <MDIO_u8SetPinValue+0x104>
			{
				/* Set PORTB Pin in PORTB Reg */
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
 62c:	a8 e3       	ldi	r26, 0x38	; 56
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	e8 e3       	ldi	r30, 0x38	; 56
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	48 2f       	mov	r20, r24
 638:	8b 81       	ldd	r24, Y+3	; 0x03
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 2e       	mov	r0, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <MDIO_u8SetPinValue+0xfa>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	0a 94       	dec	r0
 64c:	e2 f7       	brpl	.-8      	; 0x646 <MDIO_u8SetPinValue+0xf6>
 64e:	84 2b       	or	r24, r20
 650:	8c 93       	st	X, r24
 652:	7d c0       	rjmp	.+250    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
 654:	8c 81       	ldd	r24, Y+4	; 0x04
 656:	88 23       	and	r24, r24
 658:	a9 f4       	brne	.+42     	; 0x684 <MDIO_u8SetPinValue+0x134>
			{
				/* Clear PORTB Pin in PORTB Reg */
				CLEAR_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
 65a:	a8 e3       	ldi	r26, 0x38	; 56
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e8 e3       	ldi	r30, 0x38	; 56
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	48 2f       	mov	r20, r24
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	28 2f       	mov	r18, r24
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 2e       	mov	r0, r18
 672:	02 c0       	rjmp	.+4      	; 0x678 <MDIO_u8SetPinValue+0x128>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	0a 94       	dec	r0
 67a:	e2 f7       	brpl	.-8      	; 0x674 <MDIO_u8SetPinValue+0x124>
 67c:	80 95       	com	r24
 67e:	84 23       	and	r24, r20
 680:	8c 93       	st	X, r24
 682:	65 c0       	rjmp	.+202    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			else
			{
				Local_u8ErrorState = STD_TYPE_NOK;
 684:	19 82       	std	Y+1, r1	; 0x01
 686:	63 c0       	rjmp	.+198    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinValue == MDIO_HIGH)
 688:	8c 81       	ldd	r24, Y+4	; 0x04
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	a1 f4       	brne	.+40     	; 0x6b6 <MDIO_u8SetPinValue+0x166>
			{
				/* Set PORTC Pin in PORTC Reg */
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
 68e:	a5 e3       	ldi	r26, 0x35	; 53
 690:	b0 e0       	ldi	r27, 0x00	; 0
 692:	e5 e3       	ldi	r30, 0x35	; 53
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	48 2f       	mov	r20, r24
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 2e       	mov	r0, r18
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <MDIO_u8SetPinValue+0x15c>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	0a 94       	dec	r0
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <MDIO_u8SetPinValue+0x158>
 6b0:	84 2b       	or	r24, r20
 6b2:	8c 93       	st	X, r24
 6b4:	4c c0       	rjmp	.+152    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
 6b6:	8c 81       	ldd	r24, Y+4	; 0x04
 6b8:	88 23       	and	r24, r24
 6ba:	a9 f4       	brne	.+42     	; 0x6e6 <MDIO_u8SetPinValue+0x196>
			{
				/* Clear PORTC Pin in PORTC Reg */
				CLEAR_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
 6bc:	a5 e3       	ldi	r26, 0x35	; 53
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	e5 e3       	ldi	r30, 0x35	; 53
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	48 2f       	mov	r20, r24
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	28 2f       	mov	r18, r24
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 2e       	mov	r0, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <MDIO_u8SetPinValue+0x18a>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	0a 94       	dec	r0
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <MDIO_u8SetPinValue+0x186>
 6de:	80 95       	com	r24
 6e0:	84 23       	and	r24, r20
 6e2:	8c 93       	st	X, r24
 6e4:	34 c0       	rjmp	.+104    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			else
			{
				Local_u8ErrorState = STD_TYPE_NOK;
 6e6:	19 82       	std	Y+1, r1	; 0x01
 6e8:	32 c0       	rjmp	.+100    	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinValue == MDIO_HIGH)
 6ea:	8c 81       	ldd	r24, Y+4	; 0x04
 6ec:	81 30       	cpi	r24, 0x01	; 1
 6ee:	a1 f4       	brne	.+40     	; 0x718 <MDIO_u8SetPinValue+0x1c8>
			{
				/* Set PORTD Pin in PORTD Reg */
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
 6f0:	a2 e3       	ldi	r26, 0x32	; 50
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	e2 e3       	ldi	r30, 0x32	; 50
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	48 2f       	mov	r20, r24
 6fc:	8b 81       	ldd	r24, Y+3	; 0x03
 6fe:	28 2f       	mov	r18, r24
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 2e       	mov	r0, r18
 708:	02 c0       	rjmp	.+4      	; 0x70e <MDIO_u8SetPinValue+0x1be>
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	0a 94       	dec	r0
 710:	e2 f7       	brpl	.-8      	; 0x70a <MDIO_u8SetPinValue+0x1ba>
 712:	84 2b       	or	r24, r20
 714:	8c 93       	st	X, r24
 716:	1b c0       	rjmp	.+54     	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
 718:	8c 81       	ldd	r24, Y+4	; 0x04
 71a:	88 23       	and	r24, r24
 71c:	a9 f4       	brne	.+42     	; 0x748 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTD Pin in PORTD Reg */
				CLEAR_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
 71e:	a2 e3       	ldi	r26, 0x32	; 50
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	e2 e3       	ldi	r30, 0x32	; 50
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	48 2f       	mov	r20, r24
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	28 2f       	mov	r18, r24
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 2e       	mov	r0, r18
 736:	02 c0       	rjmp	.+4      	; 0x73c <MDIO_u8SetPinValue+0x1ec>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	0a 94       	dec	r0
 73e:	e2 f7       	brpl	.-8      	; 0x738 <MDIO_u8SetPinValue+0x1e8>
 740:	80 95       	com	r24
 742:	84 23       	and	r24, r20
 744:	8c 93       	st	X, r24
 746:	03 c0       	rjmp	.+6      	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			else
			{
				Local_u8ErrorState = STD_TYPE_NOK;
 748:	19 82       	std	Y+1, r1	; 0x01
 74a:	01 c0       	rjmp	.+2      	; 0x74e <MDIO_u8SetPinValue+0x1fe>
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
 74c:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
 74e:	89 81       	ldd	r24, Y+1	; 0x01
}
 750:	26 96       	adiw	r28, 0x06	; 6
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	cf 91       	pop	r28
 75e:	df 91       	pop	r29
 760:	08 95       	ret

00000762 <MDIO_u8SetPortValue>:

/* Set Port Value */
u8 MDIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 762:	df 93       	push	r29
 764:	cf 93       	push	r28
 766:	00 d0       	rcall	.+0      	; 0x768 <MDIO_u8SetPortValue+0x6>
 768:	00 d0       	rcall	.+0      	; 0x76a <MDIO_u8SetPortValue+0x8>
 76a:	0f 92       	push	r0
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62
 770:	8a 83       	std	Y+2, r24	; 0x02
 772:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= MDIO_PORTD) && ((Copy_u8PortValue == MDIO_ALL_PORT_HIGH) || (Copy_u8PortValue == MDIO_ALL_PORT_LOW)))
 778:	8a 81       	ldd	r24, Y+2	; 0x02
 77a:	84 30       	cpi	r24, 0x04	; 4
 77c:	08 f0       	brcs	.+2      	; 0x780 <MDIO_u8SetPortValue+0x1e>
 77e:	6b c0       	rjmp	.+214    	; 0x856 <MDIO_u8SetPortValue+0xf4>
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	8f 3f       	cpi	r24, 0xFF	; 255
 784:	21 f0       	breq	.+8      	; 0x78e <MDIO_u8SetPortValue+0x2c>
 786:	8b 81       	ldd	r24, Y+3	; 0x03
 788:	88 23       	and	r24, r24
 78a:	09 f0       	breq	.+2      	; 0x78e <MDIO_u8SetPortValue+0x2c>
 78c:	64 c0       	rjmp	.+200    	; 0x856 <MDIO_u8SetPortValue+0xf4>
	{
		/* Set Port Value */
		switch (Copy_u8PortId)
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	28 2f       	mov	r18, r24
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	3d 83       	std	Y+5, r19	; 0x05
 796:	2c 83       	std	Y+4, r18	; 0x04
 798:	8c 81       	ldd	r24, Y+4	; 0x04
 79a:	9d 81       	ldd	r25, Y+5	; 0x05
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	91 05       	cpc	r25, r1
 7a0:	31 f1       	breq	.+76     	; 0x7ee <MDIO_u8SetPortValue+0x8c>
 7a2:	2c 81       	ldd	r18, Y+4	; 0x04
 7a4:	3d 81       	ldd	r19, Y+5	; 0x05
 7a6:	22 30       	cpi	r18, 0x02	; 2
 7a8:	31 05       	cpc	r19, r1
 7aa:	2c f4       	brge	.+10     	; 0x7b6 <MDIO_u8SetPortValue+0x54>
 7ac:	8c 81       	ldd	r24, Y+4	; 0x04
 7ae:	9d 81       	ldd	r25, Y+5	; 0x05
 7b0:	00 97       	sbiw	r24, 0x00	; 0
 7b2:	61 f0       	breq	.+24     	; 0x7cc <MDIO_u8SetPortValue+0x6a>
 7b4:	4f c0       	rjmp	.+158    	; 0x854 <MDIO_u8SetPortValue+0xf2>
 7b6:	2c 81       	ldd	r18, Y+4	; 0x04
 7b8:	3d 81       	ldd	r19, Y+5	; 0x05
 7ba:	22 30       	cpi	r18, 0x02	; 2
 7bc:	31 05       	cpc	r19, r1
 7be:	41 f1       	breq	.+80     	; 0x810 <MDIO_u8SetPortValue+0xae>
 7c0:	8c 81       	ldd	r24, Y+4	; 0x04
 7c2:	9d 81       	ldd	r25, Y+5	; 0x05
 7c4:	83 30       	cpi	r24, 0x03	; 3
 7c6:	91 05       	cpc	r25, r1
 7c8:	a1 f1       	breq	.+104    	; 0x832 <MDIO_u8SetPortValue+0xd0>
 7ca:	44 c0       	rjmp	.+136    	; 0x854 <MDIO_u8SetPortValue+0xf2>
		{
		case MDIO_PORTA:
			if (Copy_u8PortValue == MDIO_ALL_PORT_HIGH)
 7cc:	8b 81       	ldd	r24, Y+3	; 0x03
 7ce:	8f 3f       	cpi	r24, 0xFF	; 255
 7d0:	29 f4       	brne	.+10     	; 0x7dc <MDIO_u8SetPortValue+0x7a>
			{
				/* Set PORTA Register to HIGH */
				PRIVATE_PORTA_REG = MDIO_ALL_PORT_HIGH;
 7d2:	eb e3       	ldi	r30, 0x3B	; 59
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	8f ef       	ldi	r24, 0xFF	; 255
 7d8:	80 83       	st	Z, r24
 7da:	3d c0       	rjmp	.+122    	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			else if (Copy_u8PortValue == MDIO_ALL_PORT_LOW)
 7dc:	8b 81       	ldd	r24, Y+3	; 0x03
 7de:	88 23       	and	r24, r24
 7e0:	21 f4       	brne	.+8      	; 0x7ea <MDIO_u8SetPortValue+0x88>
			{
				/* Set PORTA Register to LOW */
				PRIVATE_PORTA_REG = MDIO_ALL_PORT_LOW;
 7e2:	eb e3       	ldi	r30, 0x3B	; 59
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	10 82       	st	Z, r1
 7e8:	36 c0       	rjmp	.+108    	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			else
			{
				Local_u8ErrorState = STD_TYPE_NOK;
 7ea:	19 82       	std	Y+1, r1	; 0x01
 7ec:	34 c0       	rjmp	.+104    	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PortValue == MDIO_ALL_PORT_HIGH)
 7ee:	8b 81       	ldd	r24, Y+3	; 0x03
 7f0:	8f 3f       	cpi	r24, 0xFF	; 255
 7f2:	29 f4       	brne	.+10     	; 0x7fe <MDIO_u8SetPortValue+0x9c>
			{
				/* Set PORTB Register to HIGH */
				PRIVATE_PORTB_REG = MDIO_ALL_PORT_HIGH;
 7f4:	e8 e3       	ldi	r30, 0x38	; 56
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	8f ef       	ldi	r24, 0xFF	; 255
 7fa:	80 83       	st	Z, r24
 7fc:	2c c0       	rjmp	.+88     	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			else if (Copy_u8PortValue == MDIO_ALL_PORT_LOW)
 7fe:	8b 81       	ldd	r24, Y+3	; 0x03
 800:	88 23       	and	r24, r24
 802:	21 f4       	brne	.+8      	; 0x80c <MDIO_u8SetPortValue+0xaa>
			{
				/* Set PORTB Register to LOW */
				PRIVATE_PORTB_REG = MDIO_ALL_PORT_LOW;
 804:	e8 e3       	ldi	r30, 0x38	; 56
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	10 82       	st	Z, r1
 80a:	25 c0       	rjmp	.+74     	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			else
			{
				Local_u8ErrorState = STD_TYPE_NOK;
 80c:	19 82       	std	Y+1, r1	; 0x01
 80e:	23 c0       	rjmp	.+70     	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PortValue == MDIO_ALL_PORT_HIGH)
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	8f 3f       	cpi	r24, 0xFF	; 255
 814:	29 f4       	brne	.+10     	; 0x820 <MDIO_u8SetPortValue+0xbe>
			{
				/* Set PORTC Register to HIGH */
				PRIVATE_PORTC_REG = MDIO_ALL_PORT_HIGH;
 816:	e5 e3       	ldi	r30, 0x35	; 53
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	80 83       	st	Z, r24
 81e:	1b c0       	rjmp	.+54     	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			else if (Copy_u8PortValue == MDIO_ALL_PORT_LOW)
 820:	8b 81       	ldd	r24, Y+3	; 0x03
 822:	88 23       	and	r24, r24
 824:	21 f4       	brne	.+8      	; 0x82e <MDIO_u8SetPortValue+0xcc>
			{
				/* Set PORTC Register to LOW */
				PRIVATE_PORTC_REG = MDIO_ALL_PORT_LOW; // Corrected register name from PRIVATE_PORTB_REG to PRIVATE_PORTC_REG
 826:	e5 e3       	ldi	r30, 0x35	; 53
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	10 82       	st	Z, r1
 82c:	14 c0       	rjmp	.+40     	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			else
			{
				Local_u8ErrorState = STD_TYPE_NOK;
 82e:	19 82       	std	Y+1, r1	; 0x01
 830:	12 c0       	rjmp	.+36     	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PortValue == MDIO_ALL_PORT_HIGH)
 832:	8b 81       	ldd	r24, Y+3	; 0x03
 834:	8f 3f       	cpi	r24, 0xFF	; 255
 836:	29 f4       	brne	.+10     	; 0x842 <MDIO_u8SetPortValue+0xe0>
			{
				/* Set PORTD Register to HIGH */
				PRIVATE_PORTD_REG = MDIO_ALL_PORT_HIGH;
 838:	e2 e3       	ldi	r30, 0x32	; 50
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	8f ef       	ldi	r24, 0xFF	; 255
 83e:	80 83       	st	Z, r24
 840:	0a c0       	rjmp	.+20     	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			else if (Copy_u8PortValue == MDIO_ALL_PORT_LOW)
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	88 23       	and	r24, r24
 846:	21 f4       	brne	.+8      	; 0x850 <MDIO_u8SetPortValue+0xee>
			{
				/* Set PORTD Register to LOW */
				PRIVATE_PORTD_REG = MDIO_ALL_PORT_LOW;
 848:	e2 e3       	ldi	r30, 0x32	; 50
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	10 82       	st	Z, r1
 84e:	03 c0       	rjmp	.+6      	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			else
			{
				Local_u8ErrorState = STD_TYPE_NOK;
 850:	19 82       	std	Y+1, r1	; 0x01
 852:	01 c0       	rjmp	.+2      	; 0x856 <MDIO_u8SetPortValue+0xf4>
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
 854:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
 856:	89 81       	ldd	r24, Y+1	; 0x01
}
 858:	0f 90       	pop	r0
 85a:	0f 90       	pop	r0
 85c:	0f 90       	pop	r0
 85e:	0f 90       	pop	r0
 860:	0f 90       	pop	r0
 862:	cf 91       	pop	r28
 864:	df 91       	pop	r29
 866:	08 95       	ret

00000868 <MDIO_u8GetPinValue>:

/* Get Pin Value */
u8 MDIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
 868:	df 93       	push	r29
 86a:	cf 93       	push	r28
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	27 97       	sbiw	r28, 0x07	; 7
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	f8 94       	cli
 876:	de bf       	out	0x3e, r29	; 62
 878:	0f be       	out	0x3f, r0	; 63
 87a:	cd bf       	out	0x3d, r28	; 61
 87c:	8a 83       	std	Y+2, r24	; 0x02
 87e:	6b 83       	std	Y+3, r22	; 0x03
 880:	5d 83       	std	Y+5, r21	; 0x05
 882:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Initialize error state to OK
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	89 83       	std	Y+1, r24	; 0x01

	// Check if the port ID, pin ID are within valid ranges and pointer is not NULL
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_Pin_7 && Copy_pu8ReturnedPinValue != POINTER_NULL)
 888:	8a 81       	ldd	r24, Y+2	; 0x02
 88a:	84 30       	cpi	r24, 0x04	; 4
 88c:	08 f0       	brcs	.+2      	; 0x890 <MDIO_u8GetPinValue+0x28>
 88e:	7c c0       	rjmp	.+248    	; 0x988 <MDIO_u8GetPinValue+0x120>
 890:	8b 81       	ldd	r24, Y+3	; 0x03
 892:	88 30       	cpi	r24, 0x08	; 8
 894:	08 f0       	brcs	.+2      	; 0x898 <MDIO_u8GetPinValue+0x30>
 896:	78 c0       	rjmp	.+240    	; 0x988 <MDIO_u8GetPinValue+0x120>
 898:	8c 81       	ldd	r24, Y+4	; 0x04
 89a:	9d 81       	ldd	r25, Y+5	; 0x05
 89c:	00 97       	sbiw	r24, 0x00	; 0
 89e:	09 f4       	brne	.+2      	; 0x8a2 <MDIO_u8GetPinValue+0x3a>
 8a0:	73 c0       	rjmp	.+230    	; 0x988 <MDIO_u8GetPinValue+0x120>
	{
		// Retrieve the value from the correct port
		switch (Copy_u8PortId)
 8a2:	8a 81       	ldd	r24, Y+2	; 0x02
 8a4:	28 2f       	mov	r18, r24
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	3f 83       	std	Y+7, r19	; 0x07
 8aa:	2e 83       	std	Y+6, r18	; 0x06
 8ac:	4e 81       	ldd	r20, Y+6	; 0x06
 8ae:	5f 81       	ldd	r21, Y+7	; 0x07
 8b0:	41 30       	cpi	r20, 0x01	; 1
 8b2:	51 05       	cpc	r21, r1
 8b4:	59 f1       	breq	.+86     	; 0x90c <MDIO_u8GetPinValue+0xa4>
 8b6:	8e 81       	ldd	r24, Y+6	; 0x06
 8b8:	9f 81       	ldd	r25, Y+7	; 0x07
 8ba:	82 30       	cpi	r24, 0x02	; 2
 8bc:	91 05       	cpc	r25, r1
 8be:	34 f4       	brge	.+12     	; 0x8cc <MDIO_u8GetPinValue+0x64>
 8c0:	2e 81       	ldd	r18, Y+6	; 0x06
 8c2:	3f 81       	ldd	r19, Y+7	; 0x07
 8c4:	21 15       	cp	r18, r1
 8c6:	31 05       	cpc	r19, r1
 8c8:	69 f0       	breq	.+26     	; 0x8e4 <MDIO_u8GetPinValue+0x7c>
 8ca:	5c c0       	rjmp	.+184    	; 0x984 <MDIO_u8GetPinValue+0x11c>
 8cc:	4e 81       	ldd	r20, Y+6	; 0x06
 8ce:	5f 81       	ldd	r21, Y+7	; 0x07
 8d0:	42 30       	cpi	r20, 0x02	; 2
 8d2:	51 05       	cpc	r21, r1
 8d4:	79 f1       	breq	.+94     	; 0x934 <MDIO_u8GetPinValue+0xcc>
 8d6:	8e 81       	ldd	r24, Y+6	; 0x06
 8d8:	9f 81       	ldd	r25, Y+7	; 0x07
 8da:	83 30       	cpi	r24, 0x03	; 3
 8dc:	91 05       	cpc	r25, r1
 8de:	09 f4       	brne	.+2      	; 0x8e2 <MDIO_u8GetPinValue+0x7a>
 8e0:	3d c0       	rjmp	.+122    	; 0x95c <MDIO_u8GetPinValue+0xf4>
 8e2:	50 c0       	rjmp	.+160    	; 0x984 <MDIO_u8GetPinValue+0x11c>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINA_REG, Copy_u8PinId); // Get specific pin value from PORTA
 8e4:	e9 e3       	ldi	r30, 0x39	; 57
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	28 2f       	mov	r18, r24
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	8b 81       	ldd	r24, Y+3	; 0x03
 8f0:	88 2f       	mov	r24, r24
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	a9 01       	movw	r20, r18
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <MDIO_u8GetPinValue+0x94>
 8f8:	55 95       	asr	r21
 8fa:	47 95       	ror	r20
 8fc:	8a 95       	dec	r24
 8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <MDIO_u8GetPinValue+0x90>
 900:	ca 01       	movw	r24, r20
 902:	81 70       	andi	r24, 0x01	; 1
 904:	ec 81       	ldd	r30, Y+4	; 0x04
 906:	fd 81       	ldd	r31, Y+5	; 0x05
 908:	80 83       	st	Z, r24
 90a:	3f c0       	rjmp	.+126    	; 0x98a <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINB_REG, Copy_u8PinId); // Get specific pin value from PORTB
 90c:	e6 e3       	ldi	r30, 0x36	; 54
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	28 2f       	mov	r18, r24
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	8b 81       	ldd	r24, Y+3	; 0x03
 918:	88 2f       	mov	r24, r24
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	a9 01       	movw	r20, r18
 91e:	02 c0       	rjmp	.+4      	; 0x924 <MDIO_u8GetPinValue+0xbc>
 920:	55 95       	asr	r21
 922:	47 95       	ror	r20
 924:	8a 95       	dec	r24
 926:	e2 f7       	brpl	.-8      	; 0x920 <MDIO_u8GetPinValue+0xb8>
 928:	ca 01       	movw	r24, r20
 92a:	81 70       	andi	r24, 0x01	; 1
 92c:	ec 81       	ldd	r30, Y+4	; 0x04
 92e:	fd 81       	ldd	r31, Y+5	; 0x05
 930:	80 83       	st	Z, r24
 932:	2b c0       	rjmp	.+86     	; 0x98a <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINC_REG, Copy_u8PinId); // Get specific pin value from PORTC
 934:	e3 e3       	ldi	r30, 0x33	; 51
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	28 2f       	mov	r18, r24
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	8b 81       	ldd	r24, Y+3	; 0x03
 940:	88 2f       	mov	r24, r24
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	a9 01       	movw	r20, r18
 946:	02 c0       	rjmp	.+4      	; 0x94c <MDIO_u8GetPinValue+0xe4>
 948:	55 95       	asr	r21
 94a:	47 95       	ror	r20
 94c:	8a 95       	dec	r24
 94e:	e2 f7       	brpl	.-8      	; 0x948 <MDIO_u8GetPinValue+0xe0>
 950:	ca 01       	movw	r24, r20
 952:	81 70       	andi	r24, 0x01	; 1
 954:	ec 81       	ldd	r30, Y+4	; 0x04
 956:	fd 81       	ldd	r31, Y+5	; 0x05
 958:	80 83       	st	Z, r24
 95a:	17 c0       	rjmp	.+46     	; 0x98a <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PIND_REG, Copy_u8PinId); // Get specific pin value from PORTD
 95c:	e0 e3       	ldi	r30, 0x30	; 48
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	28 2f       	mov	r18, r24
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	8b 81       	ldd	r24, Y+3	; 0x03
 968:	88 2f       	mov	r24, r24
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	a9 01       	movw	r20, r18
 96e:	02 c0       	rjmp	.+4      	; 0x974 <MDIO_u8GetPinValue+0x10c>
 970:	55 95       	asr	r21
 972:	47 95       	ror	r20
 974:	8a 95       	dec	r24
 976:	e2 f7       	brpl	.-8      	; 0x970 <MDIO_u8GetPinValue+0x108>
 978:	ca 01       	movw	r24, r20
 97a:	81 70       	andi	r24, 0x01	; 1
 97c:	ec 81       	ldd	r30, Y+4	; 0x04
 97e:	fd 81       	ldd	r31, Y+5	; 0x05
 980:	80 83       	st	Z, r24
 982:	03 c0       	rjmp	.+6      	; 0x98a <MDIO_u8GetPinValue+0x122>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if port ID is invalid
 984:	19 82       	std	Y+1, r1	; 0x01
 986:	01 c0       	rjmp	.+2      	; 0x98a <MDIO_u8GetPinValue+0x122>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if input parameters are invalid
 988:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState; // Return the error state
 98a:	89 81       	ldd	r24, Y+1	; 0x01
}
 98c:	27 96       	adiw	r28, 0x07	; 7
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
 998:	cf 91       	pop	r28
 99a:	df 91       	pop	r29
 99c:	08 95       	ret

0000099e <MDIO_u8GetPortValue>:

/* Get Port Value */
u8 MDIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
 99e:	df 93       	push	r29
 9a0:	cf 93       	push	r28
 9a2:	00 d0       	rcall	.+0      	; 0x9a4 <MDIO_u8GetPortValue+0x6>
 9a4:	00 d0       	rcall	.+0      	; 0x9a6 <MDIO_u8GetPortValue+0x8>
 9a6:	00 d0       	rcall	.+0      	; 0x9a8 <MDIO_u8GetPortValue+0xa>
 9a8:	cd b7       	in	r28, 0x3d	; 61
 9aa:	de b7       	in	r29, 0x3e	; 62
 9ac:	8a 83       	std	Y+2, r24	; 0x02
 9ae:	7c 83       	std	Y+4, r23	; 0x04
 9b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_pu8ReturnedPortValue != POINTER_NULL)
 9b6:	8a 81       	ldd	r24, Y+2	; 0x02
 9b8:	84 30       	cpi	r24, 0x04	; 4
 9ba:	08 f0       	brcs	.+2      	; 0x9be <MDIO_u8GetPortValue+0x20>
 9bc:	40 c0       	rjmp	.+128    	; 0xa3e <MDIO_u8GetPortValue+0xa0>
 9be:	8b 81       	ldd	r24, Y+3	; 0x03
 9c0:	9c 81       	ldd	r25, Y+4	; 0x04
 9c2:	00 97       	sbiw	r24, 0x00	; 0
 9c4:	e1 f1       	breq	.+120    	; 0xa3e <MDIO_u8GetPortValue+0xa0>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
 9c6:	8a 81       	ldd	r24, Y+2	; 0x02
 9c8:	28 2f       	mov	r18, r24
 9ca:	30 e0       	ldi	r19, 0x00	; 0
 9cc:	3e 83       	std	Y+6, r19	; 0x06
 9ce:	2d 83       	std	Y+5, r18	; 0x05
 9d0:	8d 81       	ldd	r24, Y+5	; 0x05
 9d2:	9e 81       	ldd	r25, Y+6	; 0x06
 9d4:	81 30       	cpi	r24, 0x01	; 1
 9d6:	91 05       	cpc	r25, r1
 9d8:	e1 f0       	breq	.+56     	; 0xa12 <MDIO_u8GetPortValue+0x74>
 9da:	2d 81       	ldd	r18, Y+5	; 0x05
 9dc:	3e 81       	ldd	r19, Y+6	; 0x06
 9de:	22 30       	cpi	r18, 0x02	; 2
 9e0:	31 05       	cpc	r19, r1
 9e2:	2c f4       	brge	.+10     	; 0x9ee <MDIO_u8GetPortValue+0x50>
 9e4:	8d 81       	ldd	r24, Y+5	; 0x05
 9e6:	9e 81       	ldd	r25, Y+6	; 0x06
 9e8:	00 97       	sbiw	r24, 0x00	; 0
 9ea:	61 f0       	breq	.+24     	; 0xa04 <MDIO_u8GetPortValue+0x66>
 9ec:	27 c0       	rjmp	.+78     	; 0xa3c <MDIO_u8GetPortValue+0x9e>
 9ee:	2d 81       	ldd	r18, Y+5	; 0x05
 9f0:	3e 81       	ldd	r19, Y+6	; 0x06
 9f2:	22 30       	cpi	r18, 0x02	; 2
 9f4:	31 05       	cpc	r19, r1
 9f6:	a1 f0       	breq	.+40     	; 0xa20 <MDIO_u8GetPortValue+0x82>
 9f8:	8d 81       	ldd	r24, Y+5	; 0x05
 9fa:	9e 81       	ldd	r25, Y+6	; 0x06
 9fc:	83 30       	cpi	r24, 0x03	; 3
 9fe:	91 05       	cpc	r25, r1
 a00:	b1 f0       	breq	.+44     	; 0xa2e <MDIO_u8GetPortValue+0x90>
 a02:	1c c0       	rjmp	.+56     	; 0xa3c <MDIO_u8GetPortValue+0x9e>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINA_REG;
 a04:	e9 e3       	ldi	r30, 0x39	; 57
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	eb 81       	ldd	r30, Y+3	; 0x03
 a0c:	fc 81       	ldd	r31, Y+4	; 0x04
 a0e:	80 83       	st	Z, r24
 a10:	16 c0       	rjmp	.+44     	; 0xa3e <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINB_REG;
 a12:	e6 e3       	ldi	r30, 0x36	; 54
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	eb 81       	ldd	r30, Y+3	; 0x03
 a1a:	fc 81       	ldd	r31, Y+4	; 0x04
 a1c:	80 83       	st	Z, r24
 a1e:	0f c0       	rjmp	.+30     	; 0xa3e <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINC_REG;
 a20:	e3 e3       	ldi	r30, 0x33	; 51
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	80 81       	ld	r24, Z
 a26:	eb 81       	ldd	r30, Y+3	; 0x03
 a28:	fc 81       	ldd	r31, Y+4	; 0x04
 a2a:	80 83       	st	Z, r24
 a2c:	08 c0       	rjmp	.+16     	; 0xa3e <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPortValue = PRIVATE_PIND_REG;
 a2e:	e0 e3       	ldi	r30, 0x30	; 48
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	80 81       	ld	r24, Z
 a34:	eb 81       	ldd	r30, Y+3	; 0x03
 a36:	fc 81       	ldd	r31, Y+4	; 0x04
 a38:	80 83       	st	Z, r24
 a3a:	01 c0       	rjmp	.+2      	; 0xa3e <MDIO_u8GetPortValue+0xa0>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
 a3c:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
 a3e:	89 81       	ldd	r24, Y+1	; 0x01
}
 a40:	26 96       	adiw	r28, 0x06	; 6
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	de bf       	out	0x3e, r29	; 62
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	cf 91       	pop	r28
 a4e:	df 91       	pop	r29
 a50:	08 95       	ret

00000a52 <_exit>:
 a52:	f8 94       	cli

00000a54 <__stop_program>:
 a54:	ff cf       	rjmp	.-2      	; 0xa54 <__stop_program>
