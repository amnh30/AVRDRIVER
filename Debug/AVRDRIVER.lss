
AVRDRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a68  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d20  00000000  00000000  00000abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000008f4  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 27 05 	call	0xa4e	; 0xa4e <main>
  64:	0c 94 32 05 	jmp	0xa64	; 0xa64 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MDIO_IntialPins>:
#include "MDIO_Interface.h"

/* Set Intial Direction Function */

void MDIO_IntialPins(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62

	PRIVATE_DDRA_REG = PRIVATE_CONC(MDIO_PA7_A_DIR,
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
									MDIO_PA3_A_DIR,
									MDIO_PA2_A_DIR,
									MDIO_PA1_A_DIR,
									MDIO_PA0_A_DIR);

	PRIVATE_DDRB_REG = PRIVATE_CONC(MDIO_PA7_B_DIR,
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	80 83       	st	Z, r24
									MDIO_PA4_B_DIR,
									MDIO_PA3_B_DIR,
									MDIO_PA2_B_DIR,
									MDIO_PA1_B_DIR,
									MDIO_PA0_B_DIR);
	PRIVATE_DDRC_REG = PRIVATE_CONC(MDIO_PA7_C_DIR,
  84:	e4 e3       	ldi	r30, 0x34	; 52
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	80 83       	st	Z, r24
									MDIO_PA4_C_DIR,
									MDIO_PA3_C_DIR,
									MDIO_PA2_C_DIR,
									MDIO_PA1_C_DIR,
									MDIO_PA0_C_DIR);
	PRIVATE_DDRD_REG = PRIVATE_CONC(MDIO_PA7_D_DIR,
  8c:	e1 e3       	ldi	r30, 0x31	; 49
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
									MDIO_PA3_D_DIR,
									MDIO_PA2_D_DIR,
									MDIO_PA1_D_DIR,
									MDIO_PA0_D_DIR);

	PRIVATE_PORTA_REG = PRIVATE_CONC(MDIO_PA7_A_INIT_VALUE,
  94:	eb e3       	ldi	r30, 0x3B	; 59
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	80 83       	st	Z, r24
									 MDIO_PA3_A_INIT_VALUE,
									 MDIO_PA2_A_INIT_VALUE,
									 MDIO_PA1_A_INIT_VALUE,
									 MDIO_PA0_A_INIT_VALUE);

	PRIVATE_PORTB_REG = PRIVATE_CONC(MDIO_PA7_B_INIT_VALUE,
  9c:	e8 e3       	ldi	r30, 0x38	; 56
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	80 83       	st	Z, r24
									 MDIO_PA3_B_INIT_VALUE,
									 MDIO_PA2_B_INIT_VALUE,
									 MDIO_PA1_B_INIT_VALUE,
									 MDIO_PA0_B_INIT_VALUE);

	PRIVATE_PORTC_REG = PRIVATE_CONC(MDIO_PA7_C_INIT_VALUE,
  a4:	e5 e3       	ldi	r30, 0x35	; 53
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	80 83       	st	Z, r24
									 MDIO_PA3_C_INIT_VALUE,
									 MDIO_PA2_C_INIT_VALUE,
									 MDIO_PA1_C_INIT_VALUE,
									 MDIO_PA0_C_INIT_VALUE);

	PRIVATE_PORTD_REG = PRIVATE_CONC(MDIO_PA7_D_INIT_VALUE,
  ac:	e2 e3       	ldi	r30, 0x32	; 50
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	80 83       	st	Z, r24
									 MDIO_PA4_D_INIT_VALUE,
									 MDIO_PA3_D_INIT_VALUE,
									 MDIO_PA2_D_INIT_VALUE,
									 MDIO_PA1_D_INIT_VALUE,
									 MDIO_PA0_D_INIT_VALUE);
}
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	08 95       	ret

000000ba <MDIO_u8SetPinDirection>:

/* Set Pin Direction */
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirec)
{
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	00 d0       	rcall	.+0      	; 0xc0 <MDIO_u8SetPinDirection+0x6>
  c0:	00 d0       	rcall	.+0      	; 0xc2 <MDIO_u8SetPinDirection+0x8>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <MDIO_u8SetPinDirection+0xa>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	8a 83       	std	Y+2, r24	; 0x02
  ca:	6b 83       	std	Y+3, r22	; 0x03
  cc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorSate = STD_TYPE_OK;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= MDIO_Pin_7 && Copy_u8PortId <= MDIO_PORTD && Copy_u8PinDirec <= MDIO_INPUT_PULLED_UP)
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	88 30       	cpi	r24, 0x08	; 8
  d6:	08 f0       	brcs	.+2      	; 0xda <MDIO_u8SetPinDirection+0x20>
  d8:	91 c1       	rjmp	.+802    	; 0x3fc <MDIO_u8SetPinDirection+0x342>
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	08 f0       	brcs	.+2      	; 0xe2 <MDIO_u8SetPinDirection+0x28>
  e0:	8d c1       	rjmp	.+794    	; 0x3fc <MDIO_u8SetPinDirection+0x342>
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	08 f0       	brcs	.+2      	; 0xea <MDIO_u8SetPinDirection+0x30>
  e8:	89 c1       	rjmp	.+786    	; 0x3fc <MDIO_u8SetPinDirection+0x342>
	{
		/* Select Pin Direction */
		switch (Copy_u8PortId)
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	28 2f       	mov	r18, r24
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	3e 83       	std	Y+6, r19	; 0x06
  f2:	2d 83       	std	Y+5, r18	; 0x05
  f4:	8d 81       	ldd	r24, Y+5	; 0x05
  f6:	9e 81       	ldd	r25, Y+6	; 0x06
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 05       	cpc	r25, r1
  fc:	09 f4       	brne	.+2      	; 0x100 <MDIO_u8SetPinDirection+0x46>
  fe:	71 c0       	rjmp	.+226    	; 0x1e2 <MDIO_u8SetPinDirection+0x128>
 100:	2d 81       	ldd	r18, Y+5	; 0x05
 102:	3e 81       	ldd	r19, Y+6	; 0x06
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	31 05       	cpc	r19, r1
 108:	2c f4       	brge	.+10     	; 0x114 <MDIO_u8SetPinDirection+0x5a>
 10a:	8d 81       	ldd	r24, Y+5	; 0x05
 10c:	9e 81       	ldd	r25, Y+6	; 0x06
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	71 f0       	breq	.+28     	; 0x12e <MDIO_u8SetPinDirection+0x74>
 112:	75 c1       	rjmp	.+746    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
 114:	2d 81       	ldd	r18, Y+5	; 0x05
 116:	3e 81       	ldd	r19, Y+6	; 0x06
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	09 f4       	brne	.+2      	; 0x120 <MDIO_u8SetPinDirection+0x66>
 11e:	bb c0       	rjmp	.+374    	; 0x296 <MDIO_u8SetPinDirection+0x1dc>
 120:	8d 81       	ldd	r24, Y+5	; 0x05
 122:	9e 81       	ldd	r25, Y+6	; 0x06
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	91 05       	cpc	r25, r1
 128:	09 f4       	brne	.+2      	; 0x12c <MDIO_u8SetPinDirection+0x72>
 12a:	0f c1       	rjmp	.+542    	; 0x34a <MDIO_u8SetPinDirection+0x290>
 12c:	68 c1       	rjmp	.+720    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
		{
		case MDIO_PORTA:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
 12e:	8c 81       	ldd	r24, Y+4	; 0x04
 130:	88 23       	and	r24, r24
 132:	a1 f4       	brne	.+40     	; 0x15c <MDIO_u8SetPinDirection+0xa2>
			{
				/*Set DDRA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
 134:	aa e3       	ldi	r26, 0x3A	; 58
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	ea e3       	ldi	r30, 0x3A	; 58
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	48 2f       	mov	r20, r24
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <MDIO_u8SetPinDirection+0x98>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <MDIO_u8SetPinDirection+0x94>
 156:	84 2b       	or	r24, r20
 158:	8c 93       	st	X, r24
 15a:	51 c1       	rjmp	.+674    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
 15c:	8c 81       	ldd	r24, Y+4	; 0x04
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	a9 f4       	brne	.+42     	; 0x18c <MDIO_u8SetPinDirection+0xd2>
			{
				/*Clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
 162:	aa e3       	ldi	r26, 0x3A	; 58
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	ea e3       	ldi	r30, 0x3A	; 58
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	48 2f       	mov	r20, r24
 16e:	8b 81       	ldd	r24, Y+3	; 0x03
 170:	28 2f       	mov	r18, r24
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <MDIO_u8SetPinDirection+0xc6>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <MDIO_u8SetPinDirection+0xc2>
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	8c 93       	st	X, r24
 18a:	39 c1       	rjmp	.+626    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
 18c:	8c 81       	ldd	r24, Y+4	; 0x04
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	09 f0       	breq	.+2      	; 0x194 <MDIO_u8SetPinDirection+0xda>
 192:	35 c1       	rjmp	.+618    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
 194:	aa e3       	ldi	r26, 0x3A	; 58
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	ea e3       	ldi	r30, 0x3A	; 58
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	48 2f       	mov	r20, r24
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <MDIO_u8SetPinDirection+0xf6>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	2a 95       	dec	r18
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <MDIO_u8SetPinDirection+0xf2>
 1b4:	80 95       	com	r24
 1b6:	84 23       	and	r24, r20
 1b8:	8c 93       	st	X, r24
				/*Set PORTA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
 1ba:	ab e3       	ldi	r26, 0x3B	; 59
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
 1be:	eb e3       	ldi	r30, 0x3B	; 59
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	48 2f       	mov	r20, r24
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	28 2f       	mov	r18, r24
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 2e       	mov	r0, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <MDIO_u8SetPinDirection+0x11e>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	0a 94       	dec	r0
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <MDIO_u8SetPinDirection+0x11a>
 1dc:	84 2b       	or	r24, r20
 1de:	8c 93       	st	X, r24
 1e0:	0e c1       	rjmp	.+540    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
 1e2:	8c 81       	ldd	r24, Y+4	; 0x04
 1e4:	88 23       	and	r24, r24
 1e6:	a1 f4       	brne	.+40     	; 0x210 <MDIO_u8SetPinDirection+0x156>
			{
				/*Set DDRB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
 1e8:	a7 e3       	ldi	r26, 0x37	; 55
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	e7 e3       	ldi	r30, 0x37	; 55
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	48 2f       	mov	r20, r24
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	28 2f       	mov	r18, r24
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 2e       	mov	r0, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <MDIO_u8SetPinDirection+0x14c>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <MDIO_u8SetPinDirection+0x148>
 20a:	84 2b       	or	r24, r20
 20c:	8c 93       	st	X, r24
 20e:	f7 c0       	rjmp	.+494    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
 210:	8c 81       	ldd	r24, Y+4	; 0x04
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	a9 f4       	brne	.+42     	; 0x240 <MDIO_u8SetPinDirection+0x186>
			{
				/*Clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
 216:	a7 e3       	ldi	r26, 0x37	; 55
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e7 e3       	ldi	r30, 0x37	; 55
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	48 2f       	mov	r20, r24
 222:	8b 81       	ldd	r24, Y+3	; 0x03
 224:	28 2f       	mov	r18, r24
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 2e       	mov	r0, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <MDIO_u8SetPinDirection+0x17a>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <MDIO_u8SetPinDirection+0x176>
 238:	80 95       	com	r24
 23a:	84 23       	and	r24, r20
 23c:	8c 93       	st	X, r24
 23e:	df c0       	rjmp	.+446    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
 240:	8c 81       	ldd	r24, Y+4	; 0x04
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	09 f0       	breq	.+2      	; 0x248 <MDIO_u8SetPinDirection+0x18e>
 246:	db c0       	rjmp	.+438    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
 248:	a7 e3       	ldi	r26, 0x37	; 55
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	e7 e3       	ldi	r30, 0x37	; 55
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	48 2f       	mov	r20, r24
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <MDIO_u8SetPinDirection+0x1aa>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	2a 95       	dec	r18
 266:	e2 f7       	brpl	.-8      	; 0x260 <MDIO_u8SetPinDirection+0x1a6>
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	8c 93       	st	X, r24
				/*Set PORTB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
 26e:	a8 e3       	ldi	r26, 0x38	; 56
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	e8 e3       	ldi	r30, 0x38	; 56
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	48 2f       	mov	r20, r24
 27a:	8b 81       	ldd	r24, Y+3	; 0x03
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 2e       	mov	r0, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <MDIO_u8SetPinDirection+0x1d2>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <MDIO_u8SetPinDirection+0x1ce>
 290:	84 2b       	or	r24, r20
 292:	8c 93       	st	X, r24
 294:	b4 c0       	rjmp	.+360    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
 296:	8c 81       	ldd	r24, Y+4	; 0x04
 298:	88 23       	and	r24, r24
 29a:	a1 f4       	brne	.+40     	; 0x2c4 <MDIO_u8SetPinDirection+0x20a>
			{
				/*Set DDRC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
 29c:	a4 e3       	ldi	r26, 0x34	; 52
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e4 e3       	ldi	r30, 0x34	; 52
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	48 2f       	mov	r20, r24
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <MDIO_u8SetPinDirection+0x200>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <MDIO_u8SetPinDirection+0x1fc>
 2be:	84 2b       	or	r24, r20
 2c0:	8c 93       	st	X, r24
 2c2:	9d c0       	rjmp	.+314    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	a9 f4       	brne	.+42     	; 0x2f4 <MDIO_u8SetPinDirection+0x23a>
			{
				/*Clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
 2ca:	a4 e3       	ldi	r26, 0x34	; 52
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	e4 e3       	ldi	r30, 0x34	; 52
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	48 2f       	mov	r20, r24
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	28 2f       	mov	r18, r24
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 2e       	mov	r0, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <MDIO_u8SetPinDirection+0x22e>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	0a 94       	dec	r0
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <MDIO_u8SetPinDirection+0x22a>
 2ec:	80 95       	com	r24
 2ee:	84 23       	and	r24, r20
 2f0:	8c 93       	st	X, r24
 2f2:	85 c0       	rjmp	.+266    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
 2f4:	8c 81       	ldd	r24, Y+4	; 0x04
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	09 f0       	breq	.+2      	; 0x2fc <MDIO_u8SetPinDirection+0x242>
 2fa:	81 c0       	rjmp	.+258    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
 2fc:	a4 e3       	ldi	r26, 0x34	; 52
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e4 e3       	ldi	r30, 0x34	; 52
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	48 2f       	mov	r20, r24
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <MDIO_u8SetPinDirection+0x25e>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	2a 95       	dec	r18
 31a:	e2 f7       	brpl	.-8      	; 0x314 <MDIO_u8SetPinDirection+0x25a>
 31c:	80 95       	com	r24
 31e:	84 23       	and	r24, r20
 320:	8c 93       	st	X, r24
				/*Set PORTC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
 322:	a5 e3       	ldi	r26, 0x35	; 53
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e5 e3       	ldi	r30, 0x35	; 53
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	48 2f       	mov	r20, r24
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 2e       	mov	r0, r18
 33a:	02 c0       	rjmp	.+4      	; 0x340 <MDIO_u8SetPinDirection+0x286>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <MDIO_u8SetPinDirection+0x282>
 344:	84 2b       	or	r24, r20
 346:	8c 93       	st	X, r24
 348:	5a c0       	rjmp	.+180    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	88 23       	and	r24, r24
 34e:	a1 f4       	brne	.+40     	; 0x378 <MDIO_u8SetPinDirection+0x2be>
			{
				/*Set DDRD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
 350:	a1 e3       	ldi	r26, 0x31	; 49
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e1 e3       	ldi	r30, 0x31	; 49
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	8b 81       	ldd	r24, Y+3	; 0x03
 35e:	28 2f       	mov	r18, r24
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 2e       	mov	r0, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <MDIO_u8SetPinDirection+0x2b4>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	0a 94       	dec	r0
 370:	e2 f7       	brpl	.-8      	; 0x36a <MDIO_u8SetPinDirection+0x2b0>
 372:	84 2b       	or	r24, r20
 374:	8c 93       	st	X, r24
 376:	43 c0       	rjmp	.+134    	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
 378:	8c 81       	ldd	r24, Y+4	; 0x04
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	a9 f4       	brne	.+42     	; 0x3a8 <MDIO_u8SetPinDirection+0x2ee>
			{
				/*Clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
 37e:	a1 e3       	ldi	r26, 0x31	; 49
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	e1 e3       	ldi	r30, 0x31	; 49
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	48 2f       	mov	r20, r24
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 2e       	mov	r0, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <MDIO_u8SetPinDirection+0x2e2>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <MDIO_u8SetPinDirection+0x2de>
 3a0:	80 95       	com	r24
 3a2:	84 23       	and	r24, r20
 3a4:	8c 93       	st	X, r24
 3a6:	2b c0       	rjmp	.+86     	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
 3a8:	8c 81       	ldd	r24, Y+4	; 0x04
 3aa:	82 30       	cpi	r24, 0x02	; 2
 3ac:	41 f5       	brne	.+80     	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
 3ae:	a1 e3       	ldi	r26, 0x31	; 49
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
 3b2:	e1 e3       	ldi	r30, 0x31	; 49
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	48 2f       	mov	r20, r24
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	28 2f       	mov	r18, r24
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <MDIO_u8SetPinDirection+0x310>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	2a 95       	dec	r18
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <MDIO_u8SetPinDirection+0x30c>
 3ce:	80 95       	com	r24
 3d0:	84 23       	and	r24, r20
 3d2:	8c 93       	st	X, r24
				/*Set PORTD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
 3d4:	a2 e3       	ldi	r26, 0x32	; 50
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e2 e3       	ldi	r30, 0x32	; 50
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <MDIO_u8SetPinDirection+0x338>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <MDIO_u8SetPinDirection+0x334>
 3f6:	84 2b       	or	r24, r20
 3f8:	8c 93       	st	X, r24
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <MDIO_u8SetPinDirection+0x344>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
 3fc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 400:	26 96       	adiw	r28, 0x06	; 6
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	cf 91       	pop	r28
 40e:	df 91       	pop	r29
 410:	08 95       	ret

00000412 <MDIO_u8SetPortDirection>:

/* Set Port Direction */
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirec)
{
 412:	df 93       	push	r29
 414:	cf 93       	push	r28
 416:	00 d0       	rcall	.+0      	; 0x418 <MDIO_u8SetPortDirection+0x6>
 418:	00 d0       	rcall	.+0      	; 0x41a <MDIO_u8SetPortDirection+0x8>
 41a:	0f 92       	push	r0
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	8a 83       	std	Y+2, r24	; 0x02
 422:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorSate = STD_TYPE_OK;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= MDIO_PORTD) && (Copy_u8PortDirec <= MDIO_INPUT_PULLED_UP))
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	84 30       	cpi	r24, 0x04	; 4
 42c:	08 f0       	brcs	.+2      	; 0x430 <MDIO_u8SetPortDirection+0x1e>
 42e:	90 c0       	rjmp	.+288    	; 0x550 <MDIO_u8SetPortDirection+0x13e>
 430:	8b 81       	ldd	r24, Y+3	; 0x03
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	08 f0       	brcs	.+2      	; 0x438 <MDIO_u8SetPortDirection+0x26>
 436:	8c c0       	rjmp	.+280    	; 0x550 <MDIO_u8SetPortDirection+0x13e>
	{
		switch (Copy_u8PortId)
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	3d 83       	std	Y+5, r19	; 0x05
 440:	2c 83       	std	Y+4, r18	; 0x04
 442:	8c 81       	ldd	r24, Y+4	; 0x04
 444:	9d 81       	ldd	r25, Y+5	; 0x05
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	91 05       	cpc	r25, r1
 44a:	89 f1       	breq	.+98     	; 0x4ae <MDIO_u8SetPortDirection+0x9c>
 44c:	2c 81       	ldd	r18, Y+4	; 0x04
 44e:	3d 81       	ldd	r19, Y+5	; 0x05
 450:	22 30       	cpi	r18, 0x02	; 2
 452:	31 05       	cpc	r19, r1
 454:	2c f4       	brge	.+10     	; 0x460 <MDIO_u8SetPortDirection+0x4e>
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	9d 81       	ldd	r25, Y+5	; 0x05
 45a:	00 97       	sbiw	r24, 0x00	; 0
 45c:	69 f0       	breq	.+26     	; 0x478 <MDIO_u8SetPortDirection+0x66>
 45e:	76 c0       	rjmp	.+236    	; 0x54c <MDIO_u8SetPortDirection+0x13a>
 460:	2c 81       	ldd	r18, Y+4	; 0x04
 462:	3d 81       	ldd	r19, Y+5	; 0x05
 464:	22 30       	cpi	r18, 0x02	; 2
 466:	31 05       	cpc	r19, r1
 468:	e9 f1       	breq	.+122    	; 0x4e4 <MDIO_u8SetPortDirection+0xd2>
 46a:	8c 81       	ldd	r24, Y+4	; 0x04
 46c:	9d 81       	ldd	r25, Y+5	; 0x05
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	91 05       	cpc	r25, r1
 472:	09 f4       	brne	.+2      	; 0x476 <MDIO_u8SetPortDirection+0x64>
 474:	51 c0       	rjmp	.+162    	; 0x518 <MDIO_u8SetPortDirection+0x106>
 476:	6a c0       	rjmp	.+212    	; 0x54c <MDIO_u8SetPortDirection+0x13a>
		{
		case MDIO_PORTA:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	88 23       	and	r24, r24
 47c:	29 f4       	brne	.+10     	; 0x488 <MDIO_u8SetPortDirection+0x76>
			{
				/* Set all Port A pins as Output */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_OUTPUT;
 47e:	ea e3       	ldi	r30, 0x3A	; 58
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	80 83       	st	Z, r24
 486:	65 c0       	rjmp	.+202    	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	21 f4       	brne	.+8      	; 0x496 <MDIO_u8SetPortDirection+0x84>
			{
				/* Set all Port A pins as Input (Floating) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
 48e:	ea e3       	ldi	r30, 0x3A	; 58
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	10 82       	st	Z, r1
 494:	5e c0       	rjmp	.+188    	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	82 30       	cpi	r24, 0x02	; 2
 49a:	09 f0       	breq	.+2      	; 0x49e <MDIO_u8SetPortDirection+0x8c>
 49c:	5a c0       	rjmp	.+180    	; 0x552 <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port A pins as Input (Pulled-Up) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
 49e:	ea e3       	ldi	r30, 0x3A	; 58
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port A pins */
				PRIVATE_PORTA_REG = PRIVATE_ALL_PORT_OUTPUT;
 4a4:	eb e3       	ldi	r30, 0x3B	; 59
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	80 83       	st	Z, r24
 4ac:	52 c0       	rjmp	.+164    	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	88 23       	and	r24, r24
 4b2:	29 f4       	brne	.+10     	; 0x4be <MDIO_u8SetPortDirection+0xac>
			{
				/* Set all Port B pins as Output */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_OUTPUT;
 4b4:	e7 e3       	ldi	r30, 0x37	; 55
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	80 83       	st	Z, r24
 4bc:	4a c0       	rjmp	.+148    	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	21 f4       	brne	.+8      	; 0x4cc <MDIO_u8SetPortDirection+0xba>
			{
				/* Set all Port B pins as Input (Floating) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
 4c4:	e7 e3       	ldi	r30, 0x37	; 55
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	10 82       	st	Z, r1
 4ca:	43 c0       	rjmp	.+134    	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
 4cc:	8b 81       	ldd	r24, Y+3	; 0x03
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <MDIO_u8SetPortDirection+0xc2>
 4d2:	3f c0       	rjmp	.+126    	; 0x552 <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port B pins as Input (Pulled-Up) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
 4d4:	e7 e3       	ldi	r30, 0x37	; 55
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port B pins */
				PRIVATE_PORTB_REG = PRIVATE_ALL_PORT_OUTPUT;
 4da:	e8 e3       	ldi	r30, 0x38	; 56
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	80 83       	st	Z, r24
 4e2:	37 c0       	rjmp	.+110    	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
 4e4:	8b 81       	ldd	r24, Y+3	; 0x03
 4e6:	88 23       	and	r24, r24
 4e8:	29 f4       	brne	.+10     	; 0x4f4 <MDIO_u8SetPortDirection+0xe2>
			{
				/* Set all Port C pins as Output */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_OUTPUT;
 4ea:	e4 e3       	ldi	r30, 0x34	; 52
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	80 83       	st	Z, r24
 4f2:	2f c0       	rjmp	.+94     	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	81 30       	cpi	r24, 0x01	; 1
 4f8:	21 f4       	brne	.+8      	; 0x502 <MDIO_u8SetPortDirection+0xf0>
			{
				/* Set all Port C pins as Input (Floating) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
 4fa:	e4 e3       	ldi	r30, 0x34	; 52
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	10 82       	st	Z, r1
 500:	28 c0       	rjmp	.+80     	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	82 30       	cpi	r24, 0x02	; 2
 506:	29 f5       	brne	.+74     	; 0x552 <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port C pins as Input (Pulled-Up) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
 508:	e4 e3       	ldi	r30, 0x34	; 52
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port C pins */
				PRIVATE_PORTC_REG = PRIVATE_ALL_PORT_OUTPUT;
 50e:	e5 e3       	ldi	r30, 0x35	; 53
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	80 83       	st	Z, r24
 516:	1d c0       	rjmp	.+58     	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	88 23       	and	r24, r24
 51c:	29 f4       	brne	.+10     	; 0x528 <MDIO_u8SetPortDirection+0x116>
			{
				/* Set all Port D pins as Output */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_OUTPUT;
 51e:	e1 e3       	ldi	r30, 0x31	; 49
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	8f ef       	ldi	r24, 0xFF	; 255
 524:	80 83       	st	Z, r24
 526:	15 c0       	rjmp	.+42     	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	21 f4       	brne	.+8      	; 0x536 <MDIO_u8SetPortDirection+0x124>
			{
				/* Set all Port D pins as Input (Floating) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
 52e:	e1 e3       	ldi	r30, 0x31	; 49
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	10 82       	st	Z, r1
 534:	0e c0       	rjmp	.+28     	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
 536:	8b 81       	ldd	r24, Y+3	; 0x03
 538:	82 30       	cpi	r24, 0x02	; 2
 53a:	59 f4       	brne	.+22     	; 0x552 <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port D pins as Input (Pulled-Up) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
 53c:	e1 e3       	ldi	r30, 0x31	; 49
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port D pins */
				PRIVATE_PORTD_REG = PRIVATE_ALL_PORT_OUTPUT;
 542:	e2 e3       	ldi	r30, 0x32	; 50
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	80 83       	st	Z, r24
 54a:	03 c0       	rjmp	.+6      	; 0x552 <MDIO_u8SetPortDirection+0x140>
			}
			break;
		default:
			Local_u8ErrorSate = STD_TYPE_NOK;
 54c:	19 82       	std	Y+1, r1	; 0x01
 54e:	01 c0       	rjmp	.+2      	; 0x552 <MDIO_u8SetPortDirection+0x140>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
 550:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
 552:	89 81       	ldd	r24, Y+1	; 0x01
}
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	cf 91       	pop	r28
 560:	df 91       	pop	r29
 562:	08 95       	ret

00000564 <MDIO_u8SetPinValue>:
/* Set Pin Value */
u8 MDIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
 564:	df 93       	push	r29
 566:	cf 93       	push	r28
 568:	00 d0       	rcall	.+0      	; 0x56a <MDIO_u8SetPinValue+0x6>
 56a:	00 d0       	rcall	.+0      	; 0x56c <MDIO_u8SetPinValue+0x8>
 56c:	00 d0       	rcall	.+0      	; 0x56e <MDIO_u8SetPinValue+0xa>
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	8a 83       	std	Y+2, r24	; 0x02
 574:	6b 83       	std	Y+3, r22	; 0x03
 576:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_Pin_7 && Copy_u8PinValue <= MDIO_HIGH)
 57c:	8a 81       	ldd	r24, Y+2	; 0x02
 57e:	84 30       	cpi	r24, 0x04	; 4
 580:	08 f0       	brcs	.+2      	; 0x584 <MDIO_u8SetPinValue+0x20>
 582:	eb c0       	rjmp	.+470    	; 0x75a <MDIO_u8SetPinValue+0x1f6>
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	88 30       	cpi	r24, 0x08	; 8
 588:	08 f0       	brcs	.+2      	; 0x58c <MDIO_u8SetPinValue+0x28>
 58a:	e7 c0       	rjmp	.+462    	; 0x75a <MDIO_u8SetPinValue+0x1f6>
 58c:	8c 81       	ldd	r24, Y+4	; 0x04
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	08 f0       	brcs	.+2      	; 0x594 <MDIO_u8SetPinValue+0x30>
 592:	e3 c0       	rjmp	.+454    	; 0x75a <MDIO_u8SetPinValue+0x1f6>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	28 2f       	mov	r18, r24
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	3e 83       	std	Y+6, r19	; 0x06
 59c:	2d 83       	std	Y+5, r18	; 0x05
 59e:	8d 81       	ldd	r24, Y+5	; 0x05
 5a0:	9e 81       	ldd	r25, Y+6	; 0x06
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	91 05       	cpc	r25, r1
 5a6:	09 f4       	brne	.+2      	; 0x5aa <MDIO_u8SetPinValue+0x46>
 5a8:	47 c0       	rjmp	.+142    	; 0x638 <MDIO_u8SetPinValue+0xd4>
 5aa:	2d 81       	ldd	r18, Y+5	; 0x05
 5ac:	3e 81       	ldd	r19, Y+6	; 0x06
 5ae:	22 30       	cpi	r18, 0x02	; 2
 5b0:	31 05       	cpc	r19, r1
 5b2:	2c f4       	brge	.+10     	; 0x5be <MDIO_u8SetPinValue+0x5a>
 5b4:	8d 81       	ldd	r24, Y+5	; 0x05
 5b6:	9e 81       	ldd	r25, Y+6	; 0x06
 5b8:	00 97       	sbiw	r24, 0x00	; 0
 5ba:	71 f0       	breq	.+28     	; 0x5d8 <MDIO_u8SetPinValue+0x74>
 5bc:	cc c0       	rjmp	.+408    	; 0x756 <MDIO_u8SetPinValue+0x1f2>
 5be:	2d 81       	ldd	r18, Y+5	; 0x05
 5c0:	3e 81       	ldd	r19, Y+6	; 0x06
 5c2:	22 30       	cpi	r18, 0x02	; 2
 5c4:	31 05       	cpc	r19, r1
 5c6:	09 f4       	brne	.+2      	; 0x5ca <MDIO_u8SetPinValue+0x66>
 5c8:	67 c0       	rjmp	.+206    	; 0x698 <MDIO_u8SetPinValue+0x134>
 5ca:	8d 81       	ldd	r24, Y+5	; 0x05
 5cc:	9e 81       	ldd	r25, Y+6	; 0x06
 5ce:	83 30       	cpi	r24, 0x03	; 3
 5d0:	91 05       	cpc	r25, r1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <MDIO_u8SetPinValue+0x72>
 5d4:	91 c0       	rjmp	.+290    	; 0x6f8 <MDIO_u8SetPinValue+0x194>
 5d6:	bf c0       	rjmp	.+382    	; 0x756 <MDIO_u8SetPinValue+0x1f2>
		{
		case MDIO_PORTA:
			if (Copy_u8PinValue == MDIO_HIGH)
 5d8:	8c 81       	ldd	r24, Y+4	; 0x04
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	a1 f4       	brne	.+40     	; 0x606 <MDIO_u8SetPinValue+0xa2>
			{
				/* Set PORTA Pin in PORTA Reg */
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
 5de:	ab e3       	ldi	r26, 0x3B	; 59
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	eb e3       	ldi	r30, 0x3B	; 59
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	80 81       	ld	r24, Z
 5e8:	48 2f       	mov	r20, r24
 5ea:	8b 81       	ldd	r24, Y+3	; 0x03
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 2e       	mov	r0, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <MDIO_u8SetPinValue+0x98>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	0a 94       	dec	r0
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <MDIO_u8SetPinValue+0x94>
 600:	84 2b       	or	r24, r20
 602:	8c 93       	st	X, r24
 604:	ab c0       	rjmp	.+342    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
 606:	8c 81       	ldd	r24, Y+4	; 0x04
 608:	88 23       	and	r24, r24
 60a:	09 f0       	breq	.+2      	; 0x60e <MDIO_u8SetPinValue+0xaa>
 60c:	a7 c0       	rjmp	.+334    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTA Pin in PORTA Reg */
				CLEAR_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
 60e:	ab e3       	ldi	r26, 0x3B	; 59
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	eb e3       	ldi	r30, 0x3B	; 59
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	80 81       	ld	r24, Z
 618:	48 2f       	mov	r20, r24
 61a:	8b 81       	ldd	r24, Y+3	; 0x03
 61c:	28 2f       	mov	r18, r24
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 2e       	mov	r0, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <MDIO_u8SetPinValue+0xc8>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <MDIO_u8SetPinValue+0xc4>
 630:	80 95       	com	r24
 632:	84 23       	and	r24, r20
 634:	8c 93       	st	X, r24
 636:	92 c0       	rjmp	.+292    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinValue == MDIO_HIGH)
 638:	8c 81       	ldd	r24, Y+4	; 0x04
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	a1 f4       	brne	.+40     	; 0x666 <MDIO_u8SetPinValue+0x102>
			{
				/* Set PORTB Pin in PORTB Reg */
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
 63e:	a8 e3       	ldi	r26, 0x38	; 56
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e8 e3       	ldi	r30, 0x38	; 56
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	48 2f       	mov	r20, r24
 64a:	8b 81       	ldd	r24, Y+3	; 0x03
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 2e       	mov	r0, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <MDIO_u8SetPinValue+0xf8>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	0a 94       	dec	r0
 65e:	e2 f7       	brpl	.-8      	; 0x658 <MDIO_u8SetPinValue+0xf4>
 660:	84 2b       	or	r24, r20
 662:	8c 93       	st	X, r24
 664:	7b c0       	rjmp	.+246    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
 666:	8c 81       	ldd	r24, Y+4	; 0x04
 668:	88 23       	and	r24, r24
 66a:	09 f0       	breq	.+2      	; 0x66e <MDIO_u8SetPinValue+0x10a>
 66c:	77 c0       	rjmp	.+238    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTB Pin in PORTB Reg */
				CLEAR_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
 66e:	a8 e3       	ldi	r26, 0x38	; 56
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	e8 e3       	ldi	r30, 0x38	; 56
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	48 2f       	mov	r20, r24
 67a:	8b 81       	ldd	r24, Y+3	; 0x03
 67c:	28 2f       	mov	r18, r24
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 2e       	mov	r0, r18
 686:	02 c0       	rjmp	.+4      	; 0x68c <MDIO_u8SetPinValue+0x128>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	0a 94       	dec	r0
 68e:	e2 f7       	brpl	.-8      	; 0x688 <MDIO_u8SetPinValue+0x124>
 690:	80 95       	com	r24
 692:	84 23       	and	r24, r20
 694:	8c 93       	st	X, r24
 696:	62 c0       	rjmp	.+196    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinValue == MDIO_HIGH)
 698:	8c 81       	ldd	r24, Y+4	; 0x04
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	a1 f4       	brne	.+40     	; 0x6c6 <MDIO_u8SetPinValue+0x162>
			{
				/* Set PORTC Pin in PORTC Reg */
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
 69e:	a5 e3       	ldi	r26, 0x35	; 53
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	e5 e3       	ldi	r30, 0x35	; 53
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	48 2f       	mov	r20, r24
 6aa:	8b 81       	ldd	r24, Y+3	; 0x03
 6ac:	28 2f       	mov	r18, r24
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	02 2e       	mov	r0, r18
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <MDIO_u8SetPinValue+0x158>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	0a 94       	dec	r0
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <MDIO_u8SetPinValue+0x154>
 6c0:	84 2b       	or	r24, r20
 6c2:	8c 93       	st	X, r24
 6c4:	4b c0       	rjmp	.+150    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
 6c6:	8c 81       	ldd	r24, Y+4	; 0x04
 6c8:	88 23       	and	r24, r24
 6ca:	09 f0       	breq	.+2      	; 0x6ce <MDIO_u8SetPinValue+0x16a>
 6cc:	47 c0       	rjmp	.+142    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTC Pin in PORTC Reg */
				CLEAR_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
 6ce:	a5 e3       	ldi	r26, 0x35	; 53
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
 6d2:	e5 e3       	ldi	r30, 0x35	; 53
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	80 81       	ld	r24, Z
 6d8:	48 2f       	mov	r20, r24
 6da:	8b 81       	ldd	r24, Y+3	; 0x03
 6dc:	28 2f       	mov	r18, r24
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	02 2e       	mov	r0, r18
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <MDIO_u8SetPinValue+0x188>
 6e8:	88 0f       	add	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	0a 94       	dec	r0
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <MDIO_u8SetPinValue+0x184>
 6f0:	80 95       	com	r24
 6f2:	84 23       	and	r24, r20
 6f4:	8c 93       	st	X, r24
 6f6:	32 c0       	rjmp	.+100    	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinValue == MDIO_HIGH)
 6f8:	8c 81       	ldd	r24, Y+4	; 0x04
 6fa:	81 30       	cpi	r24, 0x01	; 1
 6fc:	a1 f4       	brne	.+40     	; 0x726 <MDIO_u8SetPinValue+0x1c2>
			{
				/* Set PORTD Pin in PORTD Reg */
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
 6fe:	a2 e3       	ldi	r26, 0x32	; 50
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	e2 e3       	ldi	r30, 0x32	; 50
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	48 2f       	mov	r20, r24
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	28 2f       	mov	r18, r24
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 2e       	mov	r0, r18
 716:	02 c0       	rjmp	.+4      	; 0x71c <MDIO_u8SetPinValue+0x1b8>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	0a 94       	dec	r0
 71e:	e2 f7       	brpl	.-8      	; 0x718 <MDIO_u8SetPinValue+0x1b4>
 720:	84 2b       	or	r24, r20
 722:	8c 93       	st	X, r24
 724:	1b c0       	rjmp	.+54     	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
 726:	8c 81       	ldd	r24, Y+4	; 0x04
 728:	88 23       	and	r24, r24
 72a:	c1 f4       	brne	.+48     	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTD Pin in PORTD Reg */
				CLEAR_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
 72c:	a2 e3       	ldi	r26, 0x32	; 50
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	e2 e3       	ldi	r30, 0x32	; 50
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	48 2f       	mov	r20, r24
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 2e       	mov	r0, r18
 744:	02 c0       	rjmp	.+4      	; 0x74a <MDIO_u8SetPinValue+0x1e6>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	0a 94       	dec	r0
 74c:	e2 f7       	brpl	.-8      	; 0x746 <MDIO_u8SetPinValue+0x1e2>
 74e:	80 95       	com	r24
 750:	84 23       	and	r24, r20
 752:	8c 93       	st	X, r24
 754:	03 c0       	rjmp	.+6      	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
 756:	19 82       	std	Y+1, r1	; 0x01
 758:	01 c0       	rjmp	.+2      	; 0x75c <MDIO_u8SetPinValue+0x1f8>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
 75a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 75c:	89 81       	ldd	r24, Y+1	; 0x01
}
 75e:	26 96       	adiw	r28, 0x06	; 6
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	f8 94       	cli
 764:	de bf       	out	0x3e, r29	; 62
 766:	0f be       	out	0x3f, r0	; 63
 768:	cd bf       	out	0x3d, r28	; 61
 76a:	cf 91       	pop	r28
 76c:	df 91       	pop	r29
 76e:	08 95       	ret

00000770 <MDIO_u8SetPortValue>:

/* Set Port Value */
u8 MDIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 770:	df 93       	push	r29
 772:	cf 93       	push	r28
 774:	00 d0       	rcall	.+0      	; 0x776 <MDIO_u8SetPortValue+0x6>
 776:	00 d0       	rcall	.+0      	; 0x778 <MDIO_u8SetPortValue+0x8>
 778:	0f 92       	push	r0
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	8a 83       	std	Y+2, r24	; 0x02
 780:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= MDIO_PORTD) && (Copy_u8PortValue == MDIO_HIGH))
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	84 30       	cpi	r24, 0x04	; 4
 78a:	08 f0       	brcs	.+2      	; 0x78e <MDIO_u8SetPortValue+0x1e>
 78c:	61 c0       	rjmp	.+194    	; 0x850 <MDIO_u8SetPortValue+0xe0>
 78e:	8b 81       	ldd	r24, Y+3	; 0x03
 790:	81 30       	cpi	r24, 0x01	; 1
 792:	09 f0       	breq	.+2      	; 0x796 <MDIO_u8SetPortValue+0x26>
 794:	5d c0       	rjmp	.+186    	; 0x850 <MDIO_u8SetPortValue+0xe0>
	{
		/* Set Port Value */
		switch (Copy_u8PortId)
 796:	8a 81       	ldd	r24, Y+2	; 0x02
 798:	28 2f       	mov	r18, r24
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	3d 83       	std	Y+5, r19	; 0x05
 79e:	2c 83       	std	Y+4, r18	; 0x04
 7a0:	8c 81       	ldd	r24, Y+4	; 0x04
 7a2:	9d 81       	ldd	r25, Y+5	; 0x05
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	91 05       	cpc	r25, r1
 7a8:	21 f1       	breq	.+72     	; 0x7f2 <MDIO_u8SetPortValue+0x82>
 7aa:	2c 81       	ldd	r18, Y+4	; 0x04
 7ac:	3d 81       	ldd	r19, Y+5	; 0x05
 7ae:	22 30       	cpi	r18, 0x02	; 2
 7b0:	31 05       	cpc	r19, r1
 7b2:	2c f4       	brge	.+10     	; 0x7be <MDIO_u8SetPortValue+0x4e>
 7b4:	8c 81       	ldd	r24, Y+4	; 0x04
 7b6:	9d 81       	ldd	r25, Y+5	; 0x05
 7b8:	00 97       	sbiw	r24, 0x00	; 0
 7ba:	61 f0       	breq	.+24     	; 0x7d4 <MDIO_u8SetPortValue+0x64>
 7bc:	47 c0       	rjmp	.+142    	; 0x84c <MDIO_u8SetPortValue+0xdc>
 7be:	2c 81       	ldd	r18, Y+4	; 0x04
 7c0:	3d 81       	ldd	r19, Y+5	; 0x05
 7c2:	22 30       	cpi	r18, 0x02	; 2
 7c4:	31 05       	cpc	r19, r1
 7c6:	21 f1       	breq	.+72     	; 0x810 <MDIO_u8SetPortValue+0xa0>
 7c8:	8c 81       	ldd	r24, Y+4	; 0x04
 7ca:	9d 81       	ldd	r25, Y+5	; 0x05
 7cc:	83 30       	cpi	r24, 0x03	; 3
 7ce:	91 05       	cpc	r25, r1
 7d0:	71 f1       	breq	.+92     	; 0x82e <MDIO_u8SetPortValue+0xbe>
 7d2:	3c c0       	rjmp	.+120    	; 0x84c <MDIO_u8SetPortValue+0xdc>
		{
		case MDIO_PORTA:
			if (Copy_u8PortValue == MDIO_HIGH)
 7d4:	8b 81       	ldd	r24, Y+3	; 0x03
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	29 f4       	brne	.+10     	; 0x7e4 <MDIO_u8SetPortValue+0x74>
			{
				/* Set PORTA Register to HIGH */
				PRIVATE_PORTA_REG = PRIVATE_ALL_PORT_HIGH;
 7da:	eb e3       	ldi	r30, 0x3B	; 59
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	80 83       	st	Z, r24
 7e2:	37 c0       	rjmp	.+110    	; 0x852 <MDIO_u8SetPortValue+0xe2>
			}
			else if (Copy_u8PortValue == MDIO_LOW)
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	88 23       	and	r24, r24
 7e8:	a1 f5       	brne	.+104    	; 0x852 <MDIO_u8SetPortValue+0xe2>
			{
				/* Set PORTA Register to LOW */
				PRIVATE_PORTA_REG = PRIVATE_ALL_PORT_LOW;
 7ea:	eb e3       	ldi	r30, 0x3B	; 59
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	10 82       	st	Z, r1
 7f0:	30 c0       	rjmp	.+96     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PortValue == MDIO_HIGH)
 7f2:	8b 81       	ldd	r24, Y+3	; 0x03
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	29 f4       	brne	.+10     	; 0x802 <MDIO_u8SetPortValue+0x92>
			{
				/* Set PORTB Register to HIGH */
				PRIVATE_PORTB_REG = PRIVATE_ALL_PORT_HIGH;
 7f8:	e8 e3       	ldi	r30, 0x38	; 56
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	80 83       	st	Z, r24
 800:	28 c0       	rjmp	.+80     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			}
			else if (Copy_u8PortValue == MDIO_LOW)
 802:	8b 81       	ldd	r24, Y+3	; 0x03
 804:	88 23       	and	r24, r24
 806:	29 f5       	brne	.+74     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			{
				/* Set PORTB Register to LOW */
				PRIVATE_PORTB_REG = PRIVATE_ALL_PORT_LOW;
 808:	e8 e3       	ldi	r30, 0x38	; 56
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	10 82       	st	Z, r1
 80e:	21 c0       	rjmp	.+66     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PortValue == MDIO_HIGH)
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	81 30       	cpi	r24, 0x01	; 1
 814:	29 f4       	brne	.+10     	; 0x820 <MDIO_u8SetPortValue+0xb0>
			{
				/* Set PORTC Register to HIGH */
				PRIVATE_PORTC_REG = PRIVATE_ALL_PORT_HIGH;
 816:	e5 e3       	ldi	r30, 0x35	; 53
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	80 83       	st	Z, r24
 81e:	19 c0       	rjmp	.+50     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			}
			else if (Copy_u8PortValue == MDIO_LOW)
 820:	8b 81       	ldd	r24, Y+3	; 0x03
 822:	88 23       	and	r24, r24
 824:	b1 f4       	brne	.+44     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			{
				/* Set PORTC Register to LOW */
				PRIVATE_PORTC_REG = PRIVATE_ALL_PORT_LOW; // Corrected register name from PRIVATE_PORTB_REG to PRIVATE_PORTC_REG
 826:	e5 e3       	ldi	r30, 0x35	; 53
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	10 82       	st	Z, r1
 82c:	12 c0       	rjmp	.+36     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PortValue == MDIO_HIGH)
 82e:	8b 81       	ldd	r24, Y+3	; 0x03
 830:	81 30       	cpi	r24, 0x01	; 1
 832:	29 f4       	brne	.+10     	; 0x83e <MDIO_u8SetPortValue+0xce>
			{
				/* Set PORTD Register to HIGH */
				PRIVATE_PORTD_REG = PRIVATE_ALL_PORT_HIGH;
 834:	e2 e3       	ldi	r30, 0x32	; 50
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	8f ef       	ldi	r24, 0xFF	; 255
 83a:	80 83       	st	Z, r24
 83c:	0a c0       	rjmp	.+20     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			}
			else if (Copy_u8PortValue == MDIO_LOW)
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	88 23       	and	r24, r24
 842:	39 f4       	brne	.+14     	; 0x852 <MDIO_u8SetPortValue+0xe2>
			{
				/* Set PORTD Register to LOW */
				PRIVATE_PORTD_REG = PRIVATE_ALL_PORT_LOW;
 844:	e2 e3       	ldi	r30, 0x32	; 50
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	10 82       	st	Z, r1
 84a:	03 c0       	rjmp	.+6      	; 0x852 <MDIO_u8SetPortValue+0xe2>
			}

			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
 84c:	19 82       	std	Y+1, r1	; 0x01
 84e:	01 c0       	rjmp	.+2      	; 0x852 <MDIO_u8SetPortValue+0xe2>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
 850:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 852:	89 81       	ldd	r24, Y+1	; 0x01
}
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	0f 90       	pop	r0
 85a:	0f 90       	pop	r0
 85c:	0f 90       	pop	r0
 85e:	cf 91       	pop	r28
 860:	df 91       	pop	r29
 862:	08 95       	ret

00000864 <MDIO_u8GetPinValue>:

/* Get Pin Value */
u8 MDIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
 864:	df 93       	push	r29
 866:	cf 93       	push	r28
 868:	cd b7       	in	r28, 0x3d	; 61
 86a:	de b7       	in	r29, 0x3e	; 62
 86c:	27 97       	sbiw	r28, 0x07	; 7
 86e:	0f b6       	in	r0, 0x3f	; 63
 870:	f8 94       	cli
 872:	de bf       	out	0x3e, r29	; 62
 874:	0f be       	out	0x3f, r0	; 63
 876:	cd bf       	out	0x3d, r28	; 61
 878:	8a 83       	std	Y+2, r24	; 0x02
 87a:	6b 83       	std	Y+3, r22	; 0x03
 87c:	5d 83       	std	Y+5, r21	; 0x05
 87e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Initialize error state to OK
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	89 83       	std	Y+1, r24	; 0x01

	// Check if the port ID, pin ID are within valid ranges and pointer is not NULL
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_Pin_7 && Copy_pu8ReturnedPinValue != POINTER_NULL)
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	84 30       	cpi	r24, 0x04	; 4
 888:	08 f0       	brcs	.+2      	; 0x88c <MDIO_u8GetPinValue+0x28>
 88a:	7c c0       	rjmp	.+248    	; 0x984 <MDIO_u8GetPinValue+0x120>
 88c:	8b 81       	ldd	r24, Y+3	; 0x03
 88e:	88 30       	cpi	r24, 0x08	; 8
 890:	08 f0       	brcs	.+2      	; 0x894 <MDIO_u8GetPinValue+0x30>
 892:	78 c0       	rjmp	.+240    	; 0x984 <MDIO_u8GetPinValue+0x120>
 894:	8c 81       	ldd	r24, Y+4	; 0x04
 896:	9d 81       	ldd	r25, Y+5	; 0x05
 898:	00 97       	sbiw	r24, 0x00	; 0
 89a:	09 f4       	brne	.+2      	; 0x89e <MDIO_u8GetPinValue+0x3a>
 89c:	73 c0       	rjmp	.+230    	; 0x984 <MDIO_u8GetPinValue+0x120>
	{
		// Retrieve the value from the correct port
		switch (Copy_u8PortId)
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	28 2f       	mov	r18, r24
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	3f 83       	std	Y+7, r19	; 0x07
 8a6:	2e 83       	std	Y+6, r18	; 0x06
 8a8:	4e 81       	ldd	r20, Y+6	; 0x06
 8aa:	5f 81       	ldd	r21, Y+7	; 0x07
 8ac:	41 30       	cpi	r20, 0x01	; 1
 8ae:	51 05       	cpc	r21, r1
 8b0:	59 f1       	breq	.+86     	; 0x908 <MDIO_u8GetPinValue+0xa4>
 8b2:	8e 81       	ldd	r24, Y+6	; 0x06
 8b4:	9f 81       	ldd	r25, Y+7	; 0x07
 8b6:	82 30       	cpi	r24, 0x02	; 2
 8b8:	91 05       	cpc	r25, r1
 8ba:	34 f4       	brge	.+12     	; 0x8c8 <MDIO_u8GetPinValue+0x64>
 8bc:	2e 81       	ldd	r18, Y+6	; 0x06
 8be:	3f 81       	ldd	r19, Y+7	; 0x07
 8c0:	21 15       	cp	r18, r1
 8c2:	31 05       	cpc	r19, r1
 8c4:	69 f0       	breq	.+26     	; 0x8e0 <MDIO_u8GetPinValue+0x7c>
 8c6:	5c c0       	rjmp	.+184    	; 0x980 <MDIO_u8GetPinValue+0x11c>
 8c8:	4e 81       	ldd	r20, Y+6	; 0x06
 8ca:	5f 81       	ldd	r21, Y+7	; 0x07
 8cc:	42 30       	cpi	r20, 0x02	; 2
 8ce:	51 05       	cpc	r21, r1
 8d0:	79 f1       	breq	.+94     	; 0x930 <MDIO_u8GetPinValue+0xcc>
 8d2:	8e 81       	ldd	r24, Y+6	; 0x06
 8d4:	9f 81       	ldd	r25, Y+7	; 0x07
 8d6:	83 30       	cpi	r24, 0x03	; 3
 8d8:	91 05       	cpc	r25, r1
 8da:	09 f4       	brne	.+2      	; 0x8de <MDIO_u8GetPinValue+0x7a>
 8dc:	3d c0       	rjmp	.+122    	; 0x958 <MDIO_u8GetPinValue+0xf4>
 8de:	50 c0       	rjmp	.+160    	; 0x980 <MDIO_u8GetPinValue+0x11c>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINA_REG, Copy_u8PinId); // Get specific pin value from PORTA
 8e0:	e9 e3       	ldi	r30, 0x39	; 57
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	28 2f       	mov	r18, r24
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	8b 81       	ldd	r24, Y+3	; 0x03
 8ec:	88 2f       	mov	r24, r24
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	a9 01       	movw	r20, r18
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <MDIO_u8GetPinValue+0x94>
 8f4:	55 95       	asr	r21
 8f6:	47 95       	ror	r20
 8f8:	8a 95       	dec	r24
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <MDIO_u8GetPinValue+0x90>
 8fc:	ca 01       	movw	r24, r20
 8fe:	81 70       	andi	r24, 0x01	; 1
 900:	ec 81       	ldd	r30, Y+4	; 0x04
 902:	fd 81       	ldd	r31, Y+5	; 0x05
 904:	80 83       	st	Z, r24
 906:	3f c0       	rjmp	.+126    	; 0x986 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINB_REG, Copy_u8PinId); // Get specific pin value from PORTB
 908:	e6 e3       	ldi	r30, 0x36	; 54
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	28 2f       	mov	r18, r24
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	8b 81       	ldd	r24, Y+3	; 0x03
 914:	88 2f       	mov	r24, r24
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	a9 01       	movw	r20, r18
 91a:	02 c0       	rjmp	.+4      	; 0x920 <MDIO_u8GetPinValue+0xbc>
 91c:	55 95       	asr	r21
 91e:	47 95       	ror	r20
 920:	8a 95       	dec	r24
 922:	e2 f7       	brpl	.-8      	; 0x91c <MDIO_u8GetPinValue+0xb8>
 924:	ca 01       	movw	r24, r20
 926:	81 70       	andi	r24, 0x01	; 1
 928:	ec 81       	ldd	r30, Y+4	; 0x04
 92a:	fd 81       	ldd	r31, Y+5	; 0x05
 92c:	80 83       	st	Z, r24
 92e:	2b c0       	rjmp	.+86     	; 0x986 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINC_REG, Copy_u8PinId); // Get specific pin value from PORTC
 930:	e3 e3       	ldi	r30, 0x33	; 51
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	28 2f       	mov	r18, r24
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	88 2f       	mov	r24, r24
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	a9 01       	movw	r20, r18
 942:	02 c0       	rjmp	.+4      	; 0x948 <MDIO_u8GetPinValue+0xe4>
 944:	55 95       	asr	r21
 946:	47 95       	ror	r20
 948:	8a 95       	dec	r24
 94a:	e2 f7       	brpl	.-8      	; 0x944 <MDIO_u8GetPinValue+0xe0>
 94c:	ca 01       	movw	r24, r20
 94e:	81 70       	andi	r24, 0x01	; 1
 950:	ec 81       	ldd	r30, Y+4	; 0x04
 952:	fd 81       	ldd	r31, Y+5	; 0x05
 954:	80 83       	st	Z, r24
 956:	17 c0       	rjmp	.+46     	; 0x986 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PIND_REG, Copy_u8PinId); // Get specific pin value from PORTD
 958:	e0 e3       	ldi	r30, 0x30	; 48
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	28 2f       	mov	r18, r24
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	8b 81       	ldd	r24, Y+3	; 0x03
 964:	88 2f       	mov	r24, r24
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	a9 01       	movw	r20, r18
 96a:	02 c0       	rjmp	.+4      	; 0x970 <MDIO_u8GetPinValue+0x10c>
 96c:	55 95       	asr	r21
 96e:	47 95       	ror	r20
 970:	8a 95       	dec	r24
 972:	e2 f7       	brpl	.-8      	; 0x96c <MDIO_u8GetPinValue+0x108>
 974:	ca 01       	movw	r24, r20
 976:	81 70       	andi	r24, 0x01	; 1
 978:	ec 81       	ldd	r30, Y+4	; 0x04
 97a:	fd 81       	ldd	r31, Y+5	; 0x05
 97c:	80 83       	st	Z, r24
 97e:	03 c0       	rjmp	.+6      	; 0x986 <MDIO_u8GetPinValue+0x122>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if port ID is invalid
 980:	19 82       	std	Y+1, r1	; 0x01
 982:	01 c0       	rjmp	.+2      	; 0x986 <MDIO_u8GetPinValue+0x122>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if input parameters are invalid
 984:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState; // Return the error state
 986:	89 81       	ldd	r24, Y+1	; 0x01
}
 988:	27 96       	adiw	r28, 0x07	; 7
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	cf 91       	pop	r28
 996:	df 91       	pop	r29
 998:	08 95       	ret

0000099a <MDIO_u8GetPortValue>:

/* Get Port Value */
u8 MDIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
 99a:	df 93       	push	r29
 99c:	cf 93       	push	r28
 99e:	00 d0       	rcall	.+0      	; 0x9a0 <MDIO_u8GetPortValue+0x6>
 9a0:	00 d0       	rcall	.+0      	; 0x9a2 <MDIO_u8GetPortValue+0x8>
 9a2:	00 d0       	rcall	.+0      	; 0x9a4 <MDIO_u8GetPortValue+0xa>
 9a4:	cd b7       	in	r28, 0x3d	; 61
 9a6:	de b7       	in	r29, 0x3e	; 62
 9a8:	8a 83       	std	Y+2, r24	; 0x02
 9aa:	7c 83       	std	Y+4, r23	; 0x04
 9ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_pu8ReturnedPortValue != POINTER_NULL)
 9b2:	8a 81       	ldd	r24, Y+2	; 0x02
 9b4:	84 30       	cpi	r24, 0x04	; 4
 9b6:	08 f0       	brcs	.+2      	; 0x9ba <MDIO_u8GetPortValue+0x20>
 9b8:	40 c0       	rjmp	.+128    	; 0xa3a <MDIO_u8GetPortValue+0xa0>
 9ba:	8b 81       	ldd	r24, Y+3	; 0x03
 9bc:	9c 81       	ldd	r25, Y+4	; 0x04
 9be:	00 97       	sbiw	r24, 0x00	; 0
 9c0:	e1 f1       	breq	.+120    	; 0xa3a <MDIO_u8GetPortValue+0xa0>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
 9c2:	8a 81       	ldd	r24, Y+2	; 0x02
 9c4:	28 2f       	mov	r18, r24
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	3e 83       	std	Y+6, r19	; 0x06
 9ca:	2d 83       	std	Y+5, r18	; 0x05
 9cc:	8d 81       	ldd	r24, Y+5	; 0x05
 9ce:	9e 81       	ldd	r25, Y+6	; 0x06
 9d0:	81 30       	cpi	r24, 0x01	; 1
 9d2:	91 05       	cpc	r25, r1
 9d4:	e1 f0       	breq	.+56     	; 0xa0e <MDIO_u8GetPortValue+0x74>
 9d6:	2d 81       	ldd	r18, Y+5	; 0x05
 9d8:	3e 81       	ldd	r19, Y+6	; 0x06
 9da:	22 30       	cpi	r18, 0x02	; 2
 9dc:	31 05       	cpc	r19, r1
 9de:	2c f4       	brge	.+10     	; 0x9ea <MDIO_u8GetPortValue+0x50>
 9e0:	8d 81       	ldd	r24, Y+5	; 0x05
 9e2:	9e 81       	ldd	r25, Y+6	; 0x06
 9e4:	00 97       	sbiw	r24, 0x00	; 0
 9e6:	61 f0       	breq	.+24     	; 0xa00 <MDIO_u8GetPortValue+0x66>
 9e8:	27 c0       	rjmp	.+78     	; 0xa38 <MDIO_u8GetPortValue+0x9e>
 9ea:	2d 81       	ldd	r18, Y+5	; 0x05
 9ec:	3e 81       	ldd	r19, Y+6	; 0x06
 9ee:	22 30       	cpi	r18, 0x02	; 2
 9f0:	31 05       	cpc	r19, r1
 9f2:	a1 f0       	breq	.+40     	; 0xa1c <MDIO_u8GetPortValue+0x82>
 9f4:	8d 81       	ldd	r24, Y+5	; 0x05
 9f6:	9e 81       	ldd	r25, Y+6	; 0x06
 9f8:	83 30       	cpi	r24, 0x03	; 3
 9fa:	91 05       	cpc	r25, r1
 9fc:	b1 f0       	breq	.+44     	; 0xa2a <MDIO_u8GetPortValue+0x90>
 9fe:	1c c0       	rjmp	.+56     	; 0xa38 <MDIO_u8GetPortValue+0x9e>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINA_REG;
 a00:	e9 e3       	ldi	r30, 0x39	; 57
 a02:	f0 e0       	ldi	r31, 0x00	; 0
 a04:	80 81       	ld	r24, Z
 a06:	eb 81       	ldd	r30, Y+3	; 0x03
 a08:	fc 81       	ldd	r31, Y+4	; 0x04
 a0a:	80 83       	st	Z, r24
 a0c:	16 c0       	rjmp	.+44     	; 0xa3a <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINB_REG;
 a0e:	e6 e3       	ldi	r30, 0x36	; 54
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	eb 81       	ldd	r30, Y+3	; 0x03
 a16:	fc 81       	ldd	r31, Y+4	; 0x04
 a18:	80 83       	st	Z, r24
 a1a:	0f c0       	rjmp	.+30     	; 0xa3a <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINC_REG;
 a1c:	e3 e3       	ldi	r30, 0x33	; 51
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	80 81       	ld	r24, Z
 a22:	eb 81       	ldd	r30, Y+3	; 0x03
 a24:	fc 81       	ldd	r31, Y+4	; 0x04
 a26:	80 83       	st	Z, r24
 a28:	08 c0       	rjmp	.+16     	; 0xa3a <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPortValue = PRIVATE_PIND_REG;
 a2a:	e0 e3       	ldi	r30, 0x30	; 48
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	80 81       	ld	r24, Z
 a30:	eb 81       	ldd	r30, Y+3	; 0x03
 a32:	fc 81       	ldd	r31, Y+4	; 0x04
 a34:	80 83       	st	Z, r24
 a36:	01 c0       	rjmp	.+2      	; 0xa3a <MDIO_u8GetPortValue+0xa0>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
 a38:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
}
 a3c:	26 96       	adiw	r28, 0x06	; 6
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	f8 94       	cli
 a42:	de bf       	out	0x3e, r29	; 62
 a44:	0f be       	out	0x3f, r0	; 63
 a46:	cd bf       	out	0x3d, r28	; 61
 a48:	cf 91       	pop	r28
 a4a:	df 91       	pop	r29
 a4c:	08 95       	ret

00000a4e <main>:
#include <util/delay.h>
#include "STD_Types.h"
#include "MDIO_Interface.h"


int main(int argc, char **argv) {
 a4e:	df 93       	push	r29
 a50:	cf 93       	push	r28
 a52:	00 d0       	rcall	.+0      	; 0xa54 <main+0x6>
 a54:	00 d0       	rcall	.+0      	; 0xa56 <main+0x8>
 a56:	cd b7       	in	r28, 0x3d	; 61
 a58:	de b7       	in	r29, 0x3e	; 62
 a5a:	9a 83       	std	Y+2, r25	; 0x02
 a5c:	89 83       	std	Y+1, r24	; 0x01
 a5e:	7c 83       	std	Y+4, r23	; 0x04
 a60:	6b 83       	std	Y+3, r22	; 0x03
 a62:	ff cf       	rjmp	.-2      	; 0xa62 <main+0x14>

00000a64 <_exit>:
 a64:	f8 94       	cli

00000a66 <__stop_program>:
 a66:	ff cf       	rjmp	.-2      	; 0xa66 <__stop_program>
